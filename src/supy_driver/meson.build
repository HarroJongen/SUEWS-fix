# This is the `meson.build` file for building `supy_driver`, which relies on SUEWS - a Fortran-dominant project with some C code.

project('supy_driver', 'fortran', 'c')

# building process:
# 1. build the SUEWS library using fortran compiler
# 2. use f90wrap to generate the modified fortran code with support for derived type
# 3. use f2py-f90wrap to generate the C file for the python interface
# 4. build the python extension module

##################################################################
# set the compiler flags
fortran_compiler = meson.get_compiler('fortran')
if fortran_compiler.get_id() == 'gcc'
  f90flags = ['-fPIC', '-fconvert=big-endian']
  fortran_program = find_program('gfortran')
elif fortran_compiler.get_id() == 'intel'
  f90flags = ['-fpscomp logicals', '-fPIC']
  fortran_program = find_program('ifort')
endif
add_global_arguments(f90flags, language: 'fortran')

c_compiler = meson.get_compiler('c')
cflags = ['-fPIC', '-D_POSIX_C_SOURCE=200809L']
if c_compiler.get_id() == 'clang'
  cflags += ['-fbracket-depth=1024']
endif
add_global_arguments(cflags, language: 'c')

# flags for converting f95 to fpp
fpp_flags = ['-E', '-x', 'f95-cpp-input', '-fPIC']
##################################################################

##################################################################
# include the SUEWS library
include_dir_suews = include_directories('../suews/mod')

dir_src_suews = '../suews/src'

src_f95_all = [
  'suews_ctrl_const.f95',
  'suews_util_stringmod.f95',
  'suews_ctrl_input.f95',
  'suews_ctrl_output.f95',
  'suews_util_time.f95',
  'suews_util_meteo.f95',
  'suews_phys_waterdist.f95',
  'suews_phys_narp.f95',
  'suews_phys_beers.f95',
  'suews_phys_atmmoiststab.f95',
  'suews_phys_resist.f95',
  'suews_phys_evap.f95',
  'suews_phys_snow.f95',
  'suews_phys_dailystate.f95',
  'suews_phys_lumps.f95',
  'suews_phys_anemsn.f95',
  'suews_phys_rslprof.f95',
  'suews_phys_biogenco2.f95',
  'suews_phys_ohm.f95',
  # 'suews_phys_estm.f95',
  'suews_phys_spartacus.f95',
  'suews_ctrl_driver.f95',
]

src_f95_files = []
foreach f : src_f95_all
  src_f95_files += join_paths(dir_src_suews, f)
endforeach

src_f95_files = files(src_f95_files)

src_f95_sub = [
  'suews_ctrl_driver.f95',
  # 'suews_ctrl_const.f95',
  'suews_phys_anemsn.f95',
  'suews_phys_atmmoiststab.f95',
  'suews_phys_dailystate.f95',
  'suews_phys_evap.f95',
  'suews_phys_narp.f95',
  'suews_phys_resist.f95',
  'suews_phys_rslprof.f95',
  'suews_phys_spartacus.f95',
  'suews_phys_waterdist.f95',
  'suews_util_meteo.f95',
]
src_to_wrap = src_f95_sub

src_wrap_files = []
foreach f : src_to_wrap
  src_wrap_files += join_paths(dir_src_suews, f)
endforeach
##################################################################

##################################################################
# 1. build the SUEWS library using fortran compiler
# invoke make in the suews directory to build the objects
custom_target(
  'suews_objects',
  command: ['make', '-C', '../../suews/', '&&', 'touch', 'dummy.flag'],
  build_by_default: true,
  output: ['dummy.flag'],
)

# build the static library for later use
static_library(
  'src',
  src_f95_files,
  include_directories: include_dir_suews,
)

##################################################################
# 2. use f90wrap to generate the modified fortran code with support for derived type
# Use the generator to process each source file
f95_to_fpp = generator(
  fortran_program,
  output: '@BASENAME@.fpp',
  arguments: [fpp_flags, '@INPUT@', '-o', '@OUTPUT@'],
)
gen_fpp_files = f95_to_fpp.process(src_wrap_files)

# construct the list of f95 files to be generated by f90wrap
out_wrap_f90 = []
# foreach f : src_f95
foreach f : src_to_wrap
  out_wrap_f90 += 'f90wrap_' + f.replace('.f95', '.f90')
endforeach
# out_wrap_f90 += 'f90wrap_toplevel.f90'

prog_f90wrap = find_program('f90wrap')
file_kind_map = files('kind_map')
gen_f90wrap_f90 = custom_target(
  'supy_driver',
  command: [
    prog_f90wrap,
    '-m', 'supy_driver',
    '@INPUT@',
    '-k', file_kind_map,
    '-v',
    '--skip', 'error_hint',
  ],
  input: gen_fpp_files,
  build_by_default: true,
  output: [out_wrap_f90],
)
##################################################################
# 3. use f2py-f90wrap to generate the C file for the python interface
# build the driver module c file
prog_f2py_f90wrap = find_program('f2py-f90wrap')
get_module_c = custom_target(
  output: '_supy_drivermodule.c',
  command: [
    prog_f2py_f90wrap,
    '-m', '_supy_driver',
    '@INPUT@',
    '--lower', # IMPORTANT: lower case the module name
  ],
  input: [gen_f90wrap_f90],
  depends: [gen_f90wrap_f90],
  build_by_default: true,
)

##################################################################
# 4. build the python extension module

# find the python installation
py = import('python').find_installation(pure: false)
py_dep = py.dependency()

incdir_numpy = run_command(
  py,
  [
    '-c', 'import numpy; print(numpy.get_include())',
  ],
  check: true,
).stdout().strip()

inc_np = include_directories(incdir_numpy)
# np_dep = declare_dependency(include_directories: inc_np)

incdir_f2py = run_command(
  py,
  [
    '-c', 'import numpy.f2py; print(numpy.f2py.get_include())',
  ],
  check: true,
).stdout().strip()
inc_f2py = include_directories(incdir_f2py)
fortranobject_c = incdir_f2py / 'fortranobject.c'

inc_np = include_directories(incdir_numpy, incdir_f2py)
# gh-25000
quadmath_dep = fortran_compiler.find_library('quadmath', required: true)

# Share this object across multiple modules.
fortranobject_lib = static_library(
  '_fortranobject',
  fortranobject_c,
  dependencies: py_dep,
  include_directories: [inc_np, inc_f2py],
)
fortranobject_dep = declare_dependency(
  link_with: fortranobject_lib,
  include_directories: [inc_np, inc_f2py],
)

src = declare_dependency(link_args: ['-lsrc'])
spartacus = declare_dependency(link_args: ['-lspartacus'])
suewsdriver = declare_dependency(link_args: ['-lsuewsdriver'])
lib_dir_0 = declare_dependency(link_args: ['-L.'])
lib_dir_1 = declare_dependency(link_args: ['-L../../suews/lib'])
suews_dep = [src, spartacus, suewsdriver, lib_dir_0, lib_dir_1]

py.extension_module(
  '_supy_driver',
  sources: [
    get_module_c,
    gen_f90wrap_f90,
    fortranobject_c,
  ],
  include_directories: [
    inc_np,
    '../../suews/mod',
  ],
  dependencies: [
    py_dep,
    fortranobject_dep,
    quadmath_dep,
    suews_dep,
  ],
  install: true,

)