FROM ubuntu:22.04

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive

# Install system dependencies: base, SUEWS-specific, and common dev tools
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Base dependencies from claude-sandbox
    curl \
    git \
    openssh-client \
    python3-pip \
    build-essential \
    sudo \
    jq \
    ca-certificates \
    gnupg \
    # SUEWS dependencies
    gfortran \
    cmake \
    ninja-build \
    pkg-config \
    libopenmpi-dev \
    libhdf5-dev \
    libnetcdf-dev \
    libfftw3-dev \
    libblas-dev \
    liblapack-dev \
    git-lfs \
    # Common development tools
    vim \
    wget \
    tmux \
    htop \
    tree \
    doxygen \
    graphviz \
    pandoc \
    && rm -rf /var/lib/apt/lists/*

# Install Node.js 20.x
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs

# Install GitHub CLI
RUN curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
    && chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
    && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
    && apt-get update \
    && apt-get install -y gh

# Install Claude Code
RUN npm install -g @anthropic-ai/claude-code@latest

# Create a non-root user with sudo privileges (matching claude-sandbox expectations)
RUN useradd -m -s /bin/bash claude && \
    echo 'claude ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers && \
    usermod -aG sudo claude

# Install Miniforge for Python environment management (provides mamba)
RUN ARCH=$(dpkg --print-architecture) && \
    if [ "$ARCH" = "arm64" ]; then INSTALLER="Miniforge3-Linux-aarch64.sh"; else INSTALLER="Miniforge3-Linux-x86_64.sh"; fi && \
    curl -Ls "https://github.com/conda-forge/miniforge/releases/latest/download/${INSTALLER}" -o miniforge.sh && \
    bash miniforge.sh -b -p /opt/conda && \
    rm miniforge.sh && \
    /opt/conda/bin/conda init bash && \
    chown -R claude:claude /opt/conda

# Set up conda environment path
ENV PATH=/opt/conda/bin:$PATH

# Copy environment definition and create Conda environment
COPY ../env.yml /tmp/env.yml
RUN mamba env create -f /tmp/env.yml -n suews-dev && \
    mamba clean -a -y && \
    rm /tmp/env.yml

# Set up the bash environment for both root and claude user to auto-activate the SUEWS environment
RUN echo 'source /opt/conda/etc/profile.d/conda.sh' >> /root/.bashrc && \
    echo 'conda activate suews-dev' >> /root/.bashrc && \
    echo 'source /opt/conda/etc/profile.d/conda.sh' >> /home/claude/.bashrc && \
    echo 'conda activate suews-dev' >> /home/claude/.bashrc && \
    chown claude:claude /home/claude/.bashrc

# Create workspace directory and set ownership
RUN mkdir -p /workspace && \
    chown -R claude:claude /workspace

# Set workspace directory
WORKDIR /workspace

# Set up SSH config for both root and claude user
RUN mkdir -p /root/.ssh && \
    echo "Host github.com\n\
    StrictHostKeyChecking no\n\
    UserKnownHostsFile /dev/null" > /root/.ssh/config && \
    chmod 600 /root/.ssh/config && \
    mkdir -p /home/claude/.ssh && \
    echo "Host github.com\n\
    StrictHostKeyChecking no\n\
    UserKnownHostsFile /dev/null" > /home/claude/.ssh/config && \
    chmod 600 /home/claude/.ssh/config && \
    chown -R claude:claude /home/claude/.ssh

# Set git to use credential helper for both users and fix ownership issues
RUN git config --global credential.helper 'cache --timeout=3600' && \
    sudo -u claude git config --global credential.helper 'cache --timeout=3600' && \
    git config --global --add safe.directory /workspace && \
    sudo -u claude git config --global --add safe.directory /workspace

# Create entrypoint script
RUN cat > /entrypoint.sh << 'EOF'
#!/bin/bash
set -e

# Copy SSH keys if mounted
if [ -d "/tmp/.ssh" ]; then
    cp -r /tmp/.ssh/* /root/.ssh/ 2>/dev/null || true
    chmod 600 /root/.ssh/* 2>/dev/null || true
fi

# Copy git config if mounted
if [ -f "/tmp/.gitconfig" ]; then
    cp /tmp/.gitconfig /root/.gitconfig
fi

# Execute the command
exec "$@"
EOF
RUN chmod +x /entrypoint.sh

# Switch to claude user to match claude-sandbox expectations
USER claude

ENTRYPOINT ["/entrypoint.sh"]
CMD ["bash"]