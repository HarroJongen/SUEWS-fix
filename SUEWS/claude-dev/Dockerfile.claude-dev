FROM ubuntu:22.04

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive

# Install system dependencies (base claude-sandbox + SUEWS requirements)
RUN apt-get update && apt-get install -y \
    curl \
    git \
    openssh-client \
    python3 \
    python3-pip \
    build-essential \
    sudo \
    vim \
    jq \
    ca-certificates \
    gnupg \
    software-properties-common \
    && apt-get update && apt-get install -y \
    # SUEWS-specific additions
    gfortran \
    cmake \
    ninja-build \
    pkg-config \
    libopenmpi-dev \
    libhdf5-dev \
    libnetcdf-dev \
    libfftw3-dev \
    libblas-dev \
    liblapack-dev \
    git-lfs \
    wget \
    tmux \
    htop \
    tree \
    doxygen \
    graphviz \
    pandoc \
    && rm -rf /var/lib/apt/lists/*

# Install Node.js 20.x
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs

# Install GitHub CLI
RUN curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
    && chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
    && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
    && apt-get update \
    && apt-get install -y gh

# Install Claude Code
RUN npm install -g @anthropic-ai/claude-code@latest

# Install Miniforge for modern Python environment management
RUN ARCH=$(uname -m) && \
    if [ "$ARCH" = "aarch64" ]; then INSTALLER="Miniforge3-Linux-aarch64.sh"; else INSTALLER="Miniforge3-Linux-x86_64.sh"; fi && \
    curl -Ls "https://github.com/conda-forge/miniforge/releases/latest/download/${INSTALLER}" -o miniforge.sh && \
    bash miniforge.sh -b -p /opt/conda && \
    rm miniforge.sh && \
    /opt/conda/bin/conda init bash

# Set up conda environment path
ENV PATH=/opt/conda/bin:$PATH

# Create the 'claude' user, their home directory, and the workspace directory.
# This is required by the claude-sandbox tool, which expects to run as this user
# and will fail if the user or their home directory does not exist.
RUN useradd --create-home --shell /bin/bash --uid 1000 claude && \
    echo "claude ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/claude && \
    chmod 0440 /etc/sudoers.d/claude && \
    mkdir -p /workspace && \
    chown claude:claude /workspace

SHELL ["/bin/bash", "-c"]

# Create SUEWS Python environment from the repository's env.yml file
# This ensures the Docker environment is consistent with the project's defined dependencies.
# The `claude-sandbox` tool copies the repo contents, so env.yml is available.
RUN source /opt/conda/etc/profile.d/conda.sh && \
    mamba env create -f /workspace/env.yml && \
    mamba clean -a -y

# Ensure the 'claude' user owns the Conda installation for proper activation.
RUN chown -R claude:claude /opt/conda

# Set up the bash environment for the 'claude' user to auto-activate the SUEWS environment.
# This ensures that any interactive shell, including the one started by claude-sandbox,
# will have the suews-dev environment ready.
RUN echo '' >> /home/claude/.bashrc && \
    echo '# Activate suews-dev conda environment by default' >> /home/claude/.bashrc && \
    echo 'source /opt/conda/etc/profile.d/conda.sh' >> /home/claude/.bashrc && \
    echo 'mamba activate suews-dev' >> /home/claude/.bashrc

# Set workspace directory
WORKDIR /workspace

# Set SUEWS environment variables
ENV SUEWS_DEV_HOME=/workspace/SUEWS

# Health check to verify gfortran and Python environment
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD /bin/bash -c 'source /opt/conda/etc/profile.d/conda.sh && conda activate suews-dev && gfortran --version && python --version' || exit 1

CMD ["bash"]