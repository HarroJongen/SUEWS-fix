Kdown:
  type:
    output: SUEWS
  description: Incoming shortwave radiation [W |m^-2|]
Kup:
  type:
    output:
      - SUEWS
      - SPARTACUS
  description: Outgoing shortwave radiation [W |m^-2|]
Ldown:
  type:
    output: SUEWS
  description: Incoming longwave radiation [W |m^-2|]
Lup:
  type:
    output:
      - SUEWS
      - SPARTACUS
  description: Outgoing longwave radiation [W |m^-2|]
Tsurf:
  type:
    output: SUEWS
  description: "Bulk surface temperature [\xB0C]"
QN:
  type:
    output: SUEWS
  description: Net all-wave radiation [W |m^-2|]
QF:
  type:
    output: SUEWS
  description: Anthropogenic heat flux [W |m^-2|]
QS:
  type:
    output: SUEWS
  description: Storage heat flux [W |m^-2|]
QH:
  type:
    output: SUEWS
  description: Sensible heat flux (calculated using SUEWS) [W |m^-2|]
QE:
  type:
    output: SUEWS
  description: Latent heat flux (calculated using SUEWS) [W |m^-2|]
QHlumps:
  type:
    output: SUEWS
  description: Sensible heat flux (calculated using LUMPS) [W |m^-2|]
QElumps:
  type:
    output: SUEWS
  description: Latent heat flux (calculated using LUMPS) [W |m^-2|]
QHresis:
  type:
    output: SUEWS
  description: Sensible heat flux (calculated using resistance method) [W |m^-2|]
Rain:
  type:
    output: SUEWS
  description: Rain [mm]
Irr:
  type:
    output: SUEWS
  description: Irrigation [mm]
Evap:
  type:
    output: SUEWS
  description: Evaporation [mm]
RO:
  type:
    output: SUEWS
  description: Runoff [mm]
TotCh:
  type:
    output: SUEWS
  description: Change in surface and soil moisture stores [mm]
SurfCh:
  type:
    output: SUEWS
  description: Change in surface moisture store [mm]
State:
  type:
    output: SUEWS
  description: Surface wetness state [mm]
NWtrState:
  type:
    output: SUEWS
  description: Surface wetness state (for non-water surfaces) [mm]
Drainage:
  type:
    output: SUEWS
  description: Drainage [mm]
SMD:
  type:
    output: SUEWS
  description: Soil moisture deficit [mm]
FlowCh:
  type:
    output: SUEWS
  description: Additional flow into water body [mm]
AddWater:
  type:
    output: SUEWS
  description: Additional water flow received from other grids [mm]
ROSoil:
  type:
    output: SUEWS
  description: Runoff to soil (sub-surface) [mm]
ROPipe:
  type:
    output: SUEWS
  description: Runoff to pipes [mm]
ROImp:
  type:
    output: SUEWS
  description: Above ground runoff over impervious surfaces [mm]
ROVeg:
  type:
    output: SUEWS
  description: Above ground runoff over vegetated surfaces [mm]
ROWater:
  type:
    output: SUEWS
  description: Runoff for water body [mm]
WUInt:
  type:
    output: SUEWS
  description: Internal water use [mm]
WUEveTr:
  type:
    output: SUEWS
  description: Water use for irrigation of evergreen trees [mm]
WUDecTr:
  type:
    output: SUEWS
  description: Water use for irrigation of deciduous trees [mm]
WUGrass:
  type:
    output: SUEWS
  description: Water use for irrigation of grass [mm]
SMDPaved:
  type:
    output: SUEWS
  description: Soil moisture deficit for paved surface [mm]
SMDBldgs:
  type:
    output: SUEWS
  description: Soil moisture deficit for building surface [mm]
SMDEveTr:
  type:
    output: SUEWS
  description: Soil moisture deficit for evergreen surface [mm]
SMDDecTr:
  type:
    output: SUEWS
  description: Soil moisture deficit for deciduous surface [mm]
SMDGrass:
  type:
    output: SUEWS
  description: Soil moisture deficit for grass surface [mm]
SMDBSoil:
  type:
    output: SUEWS
  description: Soil moisture deficit for bare soil surface [mm]
StPaved:
  type:
    output: SUEWS
  description: Surface wetness state for paved surface [mm]
StBldgs:
  type:
    output: SUEWS
  description: Surface wetness state for building surface [mm]
StEveTr:
  type:
    output: SUEWS
  description: Surface wetness state for evergreen tree surface [mm]
StDecTr:
  type:
    output: SUEWS
  description: Surface wetness state for deciduous tree surface [mm]
StGrass:
  type:
    output: SUEWS
  description: Surface wetness state for grass surface [mm]
StBSoil:
  type:
    output: SUEWS
  description: Surface wetness state for bare soil surface [mm]
StWater:
  type:
    output: SUEWS
  description: Surface wetness state for water surface [mm]
Zenith:
  type:
    output: SUEWS
  description: "Solar zenith angle [\xB0]"
Azimuth:
  type:
    output: SUEWS
  description: "Solar azimuth angle [\xB0]"
AlbBulk:
  type:
    output: SUEWS
  description: Bulk albedo [-]
Fcld:
  type:
    output: SUEWS
  description: Cloud fraction [-]
LAI:
  type:
    output: SUEWS
  description: Leaf area index [m 2 |m^-2|]
z0m:
  type:
    output: SUEWS
  description: Roughness length for momentum [m]
zdm:
  type:
    output: SUEWS
  description: Zero-plane displacement height [m]
Lob:
  type:
    output: SUEWS
  description: Obukhov length [m]
RA:
  type:
    output:
      - SUEWS
      - debug
  description: Aerodynamic resistance [s |m^-1|]
RS:
  type:
    output:
      - SUEWS
      - debug
  description: Surface resistance [s |m^-1|]
Fc:
  type:
    output: SUEWS
  description: CO2 flux [umol |m^-2| |s^-1|]
FcPhoto:
  type:
    output: SUEWS
  description: CO2 flux from photosynthesis [umol |m^-2| |s^-1|]
FcRespi:
  type:
    output: SUEWS
  description: CO2 flux from respiration [umol |m^-2| |s^-1|]
FcMetab:
  type:
    output: SUEWS
  description: CO2 flux from metabolism [umol |m^-2| |s^-1|]
FcTraff:
  type:
    output: SUEWS
  description: CO2 flux from traffic [umol |m^-2| |s^-1|]
FcBuild:
  type:
    output: SUEWS
  description: CO2 flux from buildings [umol |m^-2| |s^-1|]
FcPoint:
  type:
    output: SUEWS
  description: CO2 flux from point source [umol |m^-2| |s^-1|]
QNSnowFr:
  type:
    output: SUEWS
  description: Net all-wave radiation for snow-free area [W |m^-2|]
QNSnow:
  type:
    output: SUEWS
  description: Net all-wave radiation for snow area [W |m^-2|]
AlbSnow:
  type:
    output:
      - SUEWS
      - DailyState
  description: Snow albedo [-]
QM:
  type:
    output: SUEWS
  description: Snow-related heat exchange [W |m^-2|]
QMFreeze:
  type:
    output: SUEWS
  description: Internal energy change [W |m^-2|]
QMRain:
  type:
    output: SUEWS
  description: Heat released by rain on snow [W |m^-2|]
SWE:
  type:
    output: SUEWS
  description: Snow water equivalent [mm]
MeltWater:
  type:
    output: SUEWS
  description: Meltwater [mm]
MeltWStore:
  type:
    output: SUEWS
  description: Meltwater store [mm]
SnowCh:
  type:
    output: SUEWS
  description: Change in snow pack [mm]
SnowRPaved:
  type:
    output: SUEWS
  description: Snow removed from paved surface [mm]
SnowRBldgs:
  type:
    output: SUEWS
  description: Snow removed from building surface [mm]
Ts:
  type:
    output: SUEWS
  description: "Skin temperature [\xB0C]"
T2:
  type:
    output: SUEWS
  description: "Air temperature at 2 m agl [\xB0C]"
Q2:
  type:
    output: SUEWS
  description: Air specific humidity at 2 m agl [g |kg^-1|]
U10:
  type:
    output: SUEWS
  description: Wind speed at 10 m agl [m |s^-1|]
RH2:
  type:
    output: SUEWS
  description: Relative humidity at 2 m agl [%]
SWE_Paved:
  type:
    output: snow
  description: Snow water equivalent - paved surface [mm]
SWE_Bldgs:
  type:
    output: snow
  description: Snow water equivalent - building surface [mm]
SWE_EveTr:
  type:
    output: snow
  description: Snow water equivalent - evergreen surface [mm]
SWE_DecTr:
  type:
    output: snow
  description: Snow water equivalent - deciduous surface [mm]
SWE_Grass:
  type:
    output: snow
  description: Snow water equivalent - grass surface [mm]
SWE_BSoil:
  type:
    output: snow
  description: Snow water equivalent - bare soil surface [mm]
SWE_Water:
  type:
    output: snow
  description: Snow water equivalent - water surface [mm]
Mw_Paved:
  type:
    output: snow
  description: Meltwater - paved surface [mm |h^-1|]
Mw_Bldgs:
  type:
    output: snow
  description: Meltwater - building surface [mm |h^-1|]
Mw_EveTr:
  type:
    output: snow
  description: Meltwater - evergreen surface [mm |h^-1|]
Mw_DecTr:
  type:
    output: snow
  description: Meltwater - deciduous surface [mm |h^-1|]
Mw_Grass:
  type:
    output: snow
  description: Meltwater - grass surface [mm |h^-1| 1]
Mw_BSoil:
  type:
    output: snow
  description: Meltwater - bare soil surface [mm |h^-1|]
Mw_Water:
  type:
    output: snow
  description: Meltwater - water surface [mm |h^-1|]
Qm_Paved:
  type:
    output: snow
  description: Snowmelt-related heat - paved surface [W |m^-2|]
Qm_Bldgs:
  type:
    output: snow
  description: Snowmelt-related heat - building surface [W |m^-2|]
Qm_EveTr:
  type:
    output: snow
  description: Snowmelt-related heat - evergreen surface [W |m^-2|]
Qm_DecTr:
  type:
    output: snow
  description: Snowmelt-related heat - deciduous surface [W |m^-2|]
Qm_Grass:
  type:
    output: snow
  description: Snowmelt-related heat - grass surface [W |m^-2|]
Qm_BSoil:
  type:
    output: snow
  description: Snowmelt-related heat - bare soil surface [W |m^-2|]
Qm_Water:
  type:
    output: snow
  description: Snowmelt-related heat - water surface [W |m^-2|]
Qa_Paved:
  type:
    output: snow
  description: Advective heat - paved surface [W |m^-2|]
Qa_Bldgs:
  type:
    output: snow
  description: Advective heat - building surface [W |m^-2|]
Qa_EveTr:
  type:
    output: snow
  description: Advective heat - evergreen surface [W |m^-2|]
Qa_DecTr:
  type:
    output: snow
  description: Advective heat - deciduous surface [W |m^-2|]
Qa_Grass:
  type:
    output: snow
  description: Advective heat - grass surface [W |m^-2|]
Qa_BSoil:
  type:
    output: snow
  description: Advective heat - bare soil surface [W |m^-2|]
Qa_Water:
  type:
    output: snow
  description: Advective heat - water surface [W |m^-2|]
QmFr_Paved:
  type:
    output: snow
  description: Heat related to freezing of surface store - paved surface [W |m^-2|]
QmFr_Bldgs:
  type:
    output: snow
  description: Heat related to freezing of surface store - building surface [W |m^-2|]
QmFr_EveTr:
  type:
    output: snow
  description: Heat related to freezing of surface store - evergreen surface [W |m^-2|]
QmFr_DecTr:
  type:
    output: snow
  description: Heat related to freezing of surface store - deciduous surface [W |m^-2|]
QmFr_Grass:
  type:
    output: snow
  description: Heat related to freezing of surface store - grass surface [W |m^-2|]
QmFr_BSoil:
  type:
    output: snow
  description: Heat related to freezing of surface store - bare soil surface [W |m^-2|]
QmFr_Water:
  type:
    output: snow
  description: Heat related to freezing of surface store - water [W |m^-2|]
fr_Paved:
  type:
    output: snow
  description: Fraction of snow - paved surface [-]
fr_Bldgs:
  type:
    output: snow
  description: Fraction of snow - building surface [-]
fr_EveTr:
  type:
    output: snow
  description: Fraction of snow - evergreen surface [-]
fr_DecTr:
  type:
    output: snow
  description: "Fraction of snow - deciduous surface [-]\xE5"
fr_Grass:
  type:
    output: snow
  description: Fraction of snow - grass surface [-]
RainSn_Paved:
  type:
    output: snow
  description: Rain on snow - paved surface [mm]
RainSn_Bldgs:
  type:
    output: snow
  description: Rain on snow - building surface [mm]
RainSn_EveTr:
  type:
    output: snow
  description: Rain on snow - evergreen surface [mm]
RainSn_DecTr:
  type:
    output: snow
  description: Rain on snow - deciduous surface [mm]
RainSn_Grass:
  type:
    output: snow
  description: Rain on snow - grass surface [mm]
RainSn_BSoil:
  type:
    output: snow
  description: Rain on snow - bare soil surface [mm]
RainSn_Water:
  type:
    output: snow
  description: Rain on snow - water surface [mm]
kup_PavedSnow:
  type:
    output: snow
  description: Reflected shortwave radiation - paved surface [W |m^-2|]
kup_BldgsSnow:
  type:
    output: snow
  description: Reflected shortwave radiation - building surface [W |m^-2|]
kup_EveTrSnow:
  type:
    output: snow
  description: Reflected shortwave radiation - evergreen surface [W |m^-2|]
kup_DecTrSnow:
  type:
    output: snow
  description: Reflected shortwave radiation - deciduous surface [W |m^-2|]
kup_GrassSnow:
  type:
    output: snow
  description: Reflected shortwave radiation - grass surface [W |m^-2|]
kup_BSoilSnow:
  type:
    output: snow
  description: Reflected shortwave radiation - bare soil surface [W |m^-2|]
kup_WaterSnow:
  type:
    output: snow
  description: Reflected shortwave radiation - water surface [W |m^-2|]
frMelt_Paved:
  type:
    output: snow
  description: Amount of freezing melt water - paved surface [mm]
frMelt_Bldgs:
  type:
    output: snow
  description: Amount of freezing melt water - building surface [mm]
frMelt_EveTr:
  type:
    output: snow
  description: Amount of freezing melt water - evergreen surface [mm]
frMelt_DecTr:
  type:
    output: snow
  description: Amount of freezing melt water - deciduous surface [mm]
frMelt_Grass:
  type:
    output: snow
  description: Amount of freezing melt water - grass surface [mm]
frMelt_BSoil:
  type:
    output: snow
  description: Amount of freezing melt water - bare soil surface [mm]
frMelt_Water:
  type:
    output: snow
  description: Amount of freezing melt water - water surface [mm]
MwStore_Paved:
  type:
    output: snow
  description: Melt water store - paved surface [mm]
MwStore_Bldgs:
  type:
    output: snow
  description: Melt water store - building surface [mm]
MwStore_EveTr:
  type:
    output: snow
  description: Melt water store - evergreen surface [mm]
MwStore_DecTr:
  type:
    output: snow
  description: Melt water store - deciduous surface [mm]
MwStore_Grass:
  type:
    output: snow
  description: Melt water store - grass surface [mm]
MwStore_BSoil:
  type:
    output: snow
  description: Melt water store - bare soil surface [mm]
MwStore_Water:
  type:
    output: snow
  description: Melt water store - water surface [mm]
DensSnow_Paved:
  type:
    output:
      - snow
      - DailyState
  description: Snow density - paved surface [kg |m^-3|]
DensSnow_Bldgs:
  type:
    output:
      - snow
      - DailyState
  description: Snow density - building surface [kg |m^-3|]
DensSnow_EveTr:
  type:
    output:
      - snow
      - DailyState
  description: Snow density - evergreen surface [kg |m^-3|]
DensSnow_DecTr:
  type:
    output:
      - snow
      - DailyState
  description: Snow density - deciduous surface [kg |m^-3|]
DensSnow_Grass:
  type:
    output:
      - snow
      - DailyState
  description: Snow density - grass surface [kg |m^-3|]
DensSnow_BSoil:
  type:
    output:
      - snow
      - DailyState
  description: Snow density - bare soil surface [kg |m^-3|]
DensSnow_Water:
  type:
    output:
      - snow
      - DailyState
  description: Snow density - water surface [kg |m^-3|]
Sd_Paved:
  type:
    output: snow
  description: Snow depth - paved surface [mm]
Sd_Bldgs:
  type:
    output: snow
  description: Snow depth - building surface [mm]
Sd_EveTr:
  type:
    output: snow
  description: Snow depth - evergreen surface [mm]
Sd_DecTr:
  type:
    output: snow
  description: Snow depth - deciduous surface [mm]
Sd_Grass:
  type:
    output: snow
  description: Snow depth - grass surface [mm]
Sd_BSoil:
  type:
    output: snow
  description: Snow depth - bare soil surface [mm]
Sd_Water:
  type:
    output: snow
  description: Snow depth - water surface [mm]
Tsnow_Paved:
  type:
    output: snow
  description: "Snow surface temperature - paved surface [\xB0C]"
Tsnow_Bldgs:
  type:
    output: snow
  description: "Snow surface temperature - building surface [\xB0C]"
Tsnow_EveTr:
  type:
    output: snow
  description: "Snow surface temperature - evergreen surface [\xB0C]"
Tsnow_DecTr:
  type:
    output: snow
  description: "Snow surface temperature - deciduous surface [\xB0C]"
Tsnow_Grass:
  type:
    output: snow
  description: "Snow surface temperature - grass surface [\xB0C]"
Tsnow_BSoil:
  type:
    output: snow
  description: "Snow surface temperature - bare soil surface [\xB0C]"
Tsnow_Water:
  type:
    output: snow
  description: "Snow surface temperature - water surface [\xB0C]"
z_1:
  type:
    output: RSL
  description: Height at level 1 [m]
z_2:
  type:
    output: RSL
  description: Height at level 2 [m]
z_3:
  type:
    output: RSL
  description: Height at level 3 [m]
z_4:
  type:
    output: RSL
  description: Height at level 4 [m]
z_5:
  type:
    output: RSL
  description: Height at level 5 [m]
z_6:
  type:
    output: RSL
  description: Height at level 6 [m]
z_7:
  type:
    output: RSL
  description: Height at level 7 [m]
z_8:
  type:
    output: RSL
  description: Height at level 8 [m]
z_9:
  type:
    output: RSL
  description: Height at level 9 [m]
z_10:
  type:
    output: RSL
  description: Height at level 10 [m]
z_11:
  type:
    output: RSL
  description: Height at level 11 [m]
z_12:
  type:
    output: RSL
  description: Height at level 12 [m]
z_13:
  type:
    output: RSL
  description: Height at level 13 [m]
z_14:
  type:
    output: RSL
  description: Height at level 14 [m]
z_15:
  type:
    output: RSL
  description: Height at level 15 [m]
z_16:
  type:
    output: RSL
  description: Height at level 16 [m]
z_17:
  type:
    output: RSL
  description: Height at level 17 [m]
z_18:
  type:
    output: RSL
  description: Height at level 18 [m]
z_19:
  type:
    output: RSL
  description: Height at level 19 [m]
z_20:
  type:
    output: RSL
  description: Height at level 20 [m]
z_21:
  type:
    output: RSL
  description: Height at level 21 [m]
z_22:
  type:
    output: RSL
  description: Height at level 22 [m]
z_23:
  type:
    output: RSL
  description: Height at level 23 [m]
z_24:
  type:
    output: RSL
  description: Height at level 24 [m]
z_25:
  type:
    output: RSL
  description: Height at level 25 [m]
z_26:
  type:
    output: RSL
  description: Height at level 26 [m]
z_27:
  type:
    output: RSL
  description: Height at level 27 [m]
z_28:
  type:
    output: RSL
  description: Height at level 28 [m]
z_29:
  type:
    output: RSL
  description: Height at level 29 [m]
z_30:
  type:
    output: RSL
  description: Height at level 30 [m]
U_1:
  type:
    output: RSL
  description: Wind speed at level 1 [m |s^-1|]
U_2:
  type:
    output: RSL
  description: Wind speed at level 2 [m |s^-1|]
U_3:
  type:
    output: RSL
  description: Wind speed at level 3 [m |s^-1|]
U_4:
  type:
    output: RSL
  description: Wind speed at level 4 [m |s^-1|]
U_5:
  type:
    output: RSL
  description: Wind speed at level 5 [m |s^-1|]
U_6:
  type:
    output: RSL
  description: Wind speed at level 6 [m |s^-1|]
U_7:
  type:
    output: RSL
  description: Wind speed at level 7 [m |s^-1|]
U_8:
  type:
    output: RSL
  description: Wind speed at level 8 [m |s^-1|]
U_9:
  type:
    output: RSL
  description: Wind speed at level 9 [m |s^-1|]
U_10:
  type:
    output: RSL
  description: Wind speed at level 10 [m |s^-1|]
U_11:
  type:
    output: RSL
  description: Wind speed at level 11 [m |s^-1|]
U_12:
  type:
    output: RSL
  description: Wind speed at level 12 [m |s^-1|]
U_13:
  type:
    output: RSL
  description: Wind speed at level 13 [m |s^-1|]
U_14:
  type:
    output: RSL
  description: Wind speed at level 14 [m |s^-1|]
U_15:
  type:
    output: RSL
  description: Wind speed at level 15 [m |s^-1|]
U_16:
  type:
    output: RSL
  description: Wind speed at level 16 [m |s^-1|]
U_17:
  type:
    output: RSL
  description: Wind speed at level 17 [m |s^-1|]
U_18:
  type:
    output: RSL
  description: Wind speed at level 18 [m |s^-1|]
U_19:
  type:
    output: RSL
  description: Wind speed at level 19 [m |s^-1|]
U_20:
  type:
    output: RSL
  description: Wind speed at level 20 [m |s^-1|]
U_21:
  type:
    output: RSL
  description: Wind speed at level 21 [m |s^-1|]
U_22:
  type:
    output: RSL
  description: Wind speed at level 22 [m |s^-1|]
U_23:
  type:
    output: RSL
  description: Wind speed at level 23 [m |s^-1|]
U_24:
  type:
    output: RSL
  description: Wind speed at level 24 [m |s^-1|]
U_25:
  type:
    output: RSL
  description: Wind speed at level 25 [m |s^-1|]
U_26:
  type:
    output: RSL
  description: Wind speed at level 26 [m |s^-1|]
U_27:
  type:
    output: RSL
  description: Wind speed at level 27 [m |s^-1|]
U_28:
  type:
    output: RSL
  description: Wind speed at level 28 [m |s^-1|]
U_29:
  type:
    output: RSL
  description: Wind speed at level 29 [m |s^-1|]
U_30:
  type:
    output: RSL
  description: Wind speed at level 30 [m |s^-1|]
T_1:
  type:
    output: RSL
  description: "Air temperature at level 1 [\xB0C]"
T_2:
  type:
    output: RSL
  description: "Air temperature at level 2 [\xB0C]"
T_3:
  type:
    output: RSL
  description: "Air temperature at level 3 [\xB0C]"
T_4:
  type:
    output: RSL
  description: "Air temperature at level 4 [\xB0C]"
T_5:
  type:
    output: RSL
  description: "Air temperature at level 5 [\xB0C]"
T_6:
  type:
    output: RSL
  description: "Air temperature at level 6 [\xB0C]"
T_7:
  type:
    output: RSL
  description: "Air temperature at level 7 [\xB0C]"
T_8:
  type:
    output: RSL
  description: "Air temperature at level 8 [\xB0C]"
T_9:
  type:
    output: RSL
  description: "Air temperature at level 9 [\xB0C]"
T_10:
  type:
    output: RSL
  description: "Air temperature at level 10 [\xB0C]"
T_11:
  type:
    output: RSL
  description: "Air temperature at level 11 [\xB0C]"
T_12:
  type:
    output: RSL
  description: "Air temperature at level 12 [\xB0C]"
T_13:
  type:
    output: RSL
  description: "Air temperature at level 13 [\xB0C]"
T_14:
  type:
    output: RSL
  description: "Air temperature at level 14 [\xB0C]"
T_15:
  type:
    output: RSL
  description: "Air temperature at level 15 [\xB0C]"
T_16:
  type:
    output: RSL
  description: "Air temperature at level 16 [\xB0C]"
T_17:
  type:
    output: RSL
  description: "Air temperature at level 17 [\xB0C]"
T_18:
  type:
    output: RSL
  description: "Air temperature at level 18 [\xB0C]"
T_19:
  type:
    output: RSL
  description: "Air temperature at level 19 [\xB0C]"
T_20:
  type:
    output: RSL
  description: "Air temperature at level 20 [\xB0C]"
T_21:
  type:
    output: RSL
  description: "Air temperature at level 21 [\xB0C]"
T_22:
  type:
    output: RSL
  description: "Air temperature at level 22 [\xB0C]"
T_23:
  type:
    output: RSL
  description: "Air temperature at level 23 [\xB0C]"
T_24:
  type:
    output: RSL
  description: "Air temperature at level 24 [\xB0C]"
T_25:
  type:
    output: RSL
  description: "Air temperature at level 25 [\xB0C]"
T_26:
  type:
    output: RSL
  description: "Air temperature at level 26 [\xB0C]"
T_27:
  type:
    output: RSL
  description: "Air temperature at level 27 [\xB0C]"
T_28:
  type:
    output: RSL
  description: "Air temperature at level 28 [\xB0C]"
T_29:
  type:
    output: RSL
  description: "Air temperature at level 29 [\xB0C]"
T_30:
  type:
    output: RSL
  description: "Air temperature at level 30 [\xB0C]"
q_1:
  type:
    output: RSL
  description: Specific humidity at level 1 [g |kg^-1|]
q_2:
  type:
    output: RSL
  description: Specific humidity at level 2 [g |kg^-1|]
q_3:
  type:
    output: RSL
  description: Specific humidity at level 3 [g |kg^-1|]
q_4:
  type:
    output: RSL
  description: Specific humidity at level 4 [g |kg^-1|]
q_5:
  type:
    output: RSL
  description: Specific humidity at level 5 [g |kg^-1|]
q_6:
  type:
    output: RSL
  description: Specific humidity at level 6 [g |kg^-1|]
q_7:
  type:
    output: RSL
  description: Specific humidity at level 7 [g |kg^-1|]
q_8:
  type:
    output: RSL
  description: Specific humidity at level 8 [g |kg^-1|]
q_9:
  type:
    output: RSL
  description: Specific humidity at level 9 [g |kg^-1|]
q_10:
  type:
    output: RSL
  description: Specific humidity at level 10 [g |kg^-1|]
q_11:
  type:
    output: RSL
  description: Specific humidity at level 11 [g |kg^-1|]
q_12:
  type:
    output: RSL
  description: Specific humidity at level 12 [g |kg^-1|]
q_13:
  type:
    output: RSL
  description: Specific humidity at level 13 [g |kg^-1|]
q_14:
  type:
    output: RSL
  description: Specific humidity at level 14 [g |kg^-1|]
q_15:
  type:
    output: RSL
  description: Specific humidity at level 15 [g |kg^-1|]
q_16:
  type:
    output: RSL
  description: Specific humidity at level 16 [g |kg^-1|]
q_17:
  type:
    output: RSL
  description: Specific humidity at level 17 [g |kg^-1|]
q_18:
  type:
    output: RSL
  description: Specific humidity at level 18 [g |kg^-1|]
q_19:
  type:
    output: RSL
  description: Specific humidity at level 19 [g |kg^-1|]
q_20:
  type:
    output: RSL
  description: Specific humidity at level 20 [g |kg^-1|]
q_21:
  type:
    output: RSL
  description: Specific humidity at level 21 [g |kg^-1|]
q_22:
  type:
    output: RSL
  description: Specific humidity at level 22 [g |kg^-1|]
q_23:
  type:
    output: RSL
  description: Specific humidity at level 23 [g |kg^-1|]
q_24:
  type:
    output: RSL
  description: Specific humidity at level 24 [g |kg^-1|]
q_25:
  type:
    output: RSL
  description: Specific humidity at level 25 [g |kg^-1|]
q_26:
  type:
    output: RSL
  description: Specific humidity at level 26 [g |kg^-1|]
q_27:
  type:
    output: RSL
  description: Specific humidity at level 27 [g |kg^-1|]
q_28:
  type:
    output: RSL
  description: Specific humidity at level 28 [g |kg^-1|]
q_29:
  type:
    output: RSL
  description: Specific humidity at level 29 [g |kg^-1|]
q_30:
  type:
    output: RSL
  description: Specific humidity at level 30 [g |kg^-1|]
azimuth:
  type:
    output: BEERS
  description: Azimuth angle of the Sun
altitude:
  type:
    output: BEERS
  description: Altitude angle of the Sun
GlobalRad:
  type:
    output: BEERS
  description: Input Kdn
DiffuseRad:
  type:
    output: BEERS
  description: Diffuse shortwave radiation
DirectRad:
  type:
    output: BEERS
  description: Direct shortwave radiation
Kdown2d:
  type:
    output: BEERS
  description: Incoming shortwave radiation at POI
Kup2d:
  type:
    output: BEERS
  description: Outgoing shortwave radiation at POI
Ksouth:
  type:
    output: BEERS
  description: Shortwave radiation from south at POI
Kwest:
  type:
    output: BEERS
  description: Shortwave radiation from west at POI
Knorth:
  type:
    output: BEERS
  description: Shortwave radiation from north at POI
Keast:
  type:
    output: BEERS
  description: Shortwave radiation from east at POI
Ldown2d:
  type:
    output: BEERS
  description: Incoming longwave radiation at POI
Lup2d:
  type:
    output: BEERS
  description: Outgoing longwave radiation at POI
Lsouth:
  type:
    output: BEERS
  description: Longwave radiation from south at POI
Lwest:
  type:
    output: BEERS
  description: Longwave radiation from west at POI
Lnorth:
  type:
    output: BEERS
  description: Longwave radiation from north at POI
Least:
  type:
    output: BEERS
  description: Longwave radiation from east at POI
Tmrt:
  type:
    output: BEERS
  description: Mean Radiant Temperature
I0:
  type:
    output: BEERS
  description: theoretical value of maximum incoming solar radiation
CI:
  type:
    output: BEERS
  description: clearness index for Ldown (Lindberg et al. 2008)
Ta:
  type:
    output: BEERS
  description: Air temperature
Tg:
  type:
    output: BEERS
  description: Surface temperature
HDD1_h:
  type:
    output: DailyState
  description: "Heating degree days [\xB0C d]"
HDD2_c:
  type:
    output: DailyState
  description: "Cooling degree days [\xB0C d]"
HDD3_Tmean:
  type:
    output: DailyState
  description: "Average daily air temperature in forcing data [\xB0C]"
HDD4_T5d:
  type:
    output: DailyState
  description: "5-day running-mean air temperature in forcing data [\xB0C]"
P_day:
  type:
    output: DailyState
  description: Daily total precipitation [mm]
DaysSR:
  type:
    output: DailyState
  description: Days since rain [days]
GDD_EveTr:
  type:
    output: DailyState
  description: "Growing degree days for evergreen tree [\xB0C d]"
GDD_DecTr:
  type:
    output: DailyState
  description: "Growing degree days for deciduous tree [\xB0C d]"
GDD_Grass:
  type:
    output: DailyState
  description: "Growing degree days for grass [\xB0C d]"
SDD_EveTr:
  type:
    output: DailyState
  description: "Senescence degree days for evergreen tree  [\xB0C d]"
SDD_DecTr:
  type:
    output: DailyState
  description: "Senescence degree days for deciduous tree [\xB0C d]"
SDD_Grass:
  type:
    output: DailyState
  description: "Senescence degree days for grass [\xB0C d]"
Tmin:
  type:
    output: DailyState
  description: "Daily minimum temperature in forcing data [\xB0C]"
Tmax:
  type:
    output: DailyState
  description: "Daily maximum temperature in forcing data [\xB0C]"
DLHrs:
  type:
    output: DailyState
  description: Day length [h]
LAI_EveTr:
  type:
    output: DailyState
  description: Leaf area index of evergreen trees [|m^-2| |m^-2|]
LAI_DecTr:
  type:
    output: DailyState
  description: Leaf area index of deciduous trees [|m^-2| |m^-2|]
LAI_Grass:
  type:
    output: DailyState
  description: Leaf area index of grass [|m^-2| |m^-2|]
DecidCap:
  type:
    output: DailyState
  description: Moisture storage capacity of deciduous trees [mm]
Porosity:
  type:
    output: DailyState
  description: Porosity of deciduous trees [-]
AlbEveTr:
  type:
    output: DailyState
  description: Albedo of evergreen trees [-]
AlbDecTr:
  type:
    output: DailyState
  description: Albedo of deciduous trees [-]
AlbGrass:
  type:
    output: DailyState
  description: Albedo of grass [-]
WU_EveTr1:
  type:
    output: DailyState
  description: Total water use for evergreen trees [mm]
WU_EveTr2:
  type:
    output: DailyState
  description: Automatic water use for evergreen trees [mm]
WU_EveTr3:
  type:
    output: DailyState
  description: Manual water use for evergreen trees [mm]
WU_DecTr1:
  type:
    output: DailyState
  description: Total water use for deciduous trees [mm]
WU_DecTr2:
  type:
    output: DailyState
  description: Automatic water use for deciduous trees [mm]
WU_DecTr3:
  type:
    output: DailyState
  description: Manual water use for deciduous trees [mm]
WU_Grass1:
  type:
    output: DailyState
  description: Total water use for grass [mm]
WU_Grass2:
  type:
    output: DailyState
  description: Automatic water use for grass [mm]
WU_Grass3:
  type:
    output: DailyState
  description: Manual water use for grass [mm]
deltaLAI:
  type:
    output: DailyState
  description: Change in leaf area index (normalised 0-1) [-]
LAIlumps:
  type:
    output: DailyState
  description: Leaf area index used in LUMPS (normalised 0-1) [-]
a1:
  type:
    output: DailyState
  description: OHM cofficient a1 - [-]
a2:
  type:
    output: DailyState
  description: OHM cofficient a2 [W |m^-2| |h^-1|]
a3:
  type:
    output: DailyState
  description: OHM cofficient a3 - [W |m^-2|]
aerodynamicresistancemethod:
  type:
    input: state
  description: Internal use. Please DO NOT modify
  suews-related variables: None
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
ah_min:
  type:
    input: state
  description: Minimum QF values.
  suews-related variables:
    :option:`AHMin_WD <suews:AHMin_WD>`, :option:`AHMin_WE
    <suews:AHMin_WE>`
  path_loading:
    AnthropogenicCode:
      - AHMin_WD
      - AHMin_WE
  data dimensions:
    - (2,)
    - remarks: "2: {Weekday, Weekend}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
ah_slope_cooling:
  type:
    input: state
  description: Cooling slope of QF calculation.
  suews-related variables:
    :option:`AHSlope_Cooling_WD <suews:AHSlope_Cooling_WD>`,
    :option:`AHSlope_Cooling_WE <suews:AHSlope_Cooling_WE>`
  path_loading:
    AnthropogenicCode:
      - AHSlope_Cooling_WD
      - AHSlope_Cooling_WE
  data dimensions:
    - (2,)
    - remarks: "2: {Weekday, Weekend}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
ah_slope_heating:
  type:
    input: state
  description: Heating slope of QF calculation.
  suews-related variables:
    :option:`AHSlope_Heating_WD <suews:AHSlope_Heating_WD>`,
    :option:`AHSlope_Heating_WE <suews:AHSlope_Heating_WE>`
  path_loading:
    AnthropogenicCode:
      - AHSlope_Heating_WD
      - AHSlope_Heating_WE
  data dimensions:
    - (2,)
    - remarks: "2: {Weekday, Weekend}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
ahprof_24hr:
  type:
    input: state
  description: Hourly profile values used in energy use calculation.
  suews-related variables:
    :option:`EnergyUseProfWD <suews:EnergyUseProfWD>`, :option:`EnergyUseProfWE
    <suews:EnergyUseProfWE>`
  path_loading:
    AnthropogenicCode:
      EnergyUseProfWD: ":"
      EnergyUseProfWE: ":"
  data dimensions:
    - (24, 2)
    - remarks: "24: hours of a day\n\n        2: {Weekday, Weekend}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
air_ext_lw:
  type:
    input: state
  description: Internal use. Please DO NOT modify
  suews-related variables: None
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
air_ext_sw:
  type:
    input: state
  description: Internal use. Please DO NOT modify
  suews-related variables: None
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
air_ssa_lw:
  type:
    input: state
  description: Internal use. Please DO NOT modify
  suews-related variables: None
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
air_ssa_sw:
  type:
    input: state
  description: Internal use. Please DO NOT modify
  suews-related variables: None
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
alb:
  type:
    input: state
  description: Effective surface albedo (middle of the day value) for summertime.
  suews-related variables: :option:`AlbedoMax <suews:AlbedoMax>`
  path_loading:
    Code_Paved: AlbedoMax
    Code_Bldgs: AlbedoMax
    Code_EveTr: AlbedoMax
    Code_DecTr: AlbedoMax
    Code_Grass: AlbedoMax
    Code_Bsoil: AlbedoMax
    Code_Water: AlbedoMax
  data dimensions:
    - (7,)
    - remarks:
        "7: { `suews:Paved`, `suews:Bldgs`, `suews:EveTr`, `suews:DecTr`, `suews:Grass`,
        `suews:BSoil`, `suews:Water`}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
albdectr_id:
  type:
    input: state
  description: Albedo of deciduous surface `DecTr` on day 0 of run
  suews-related variables: :option:`albDecTr0 <suews:albDecTr0>`
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
albevetr_id:
  type:
    input: state
  description: Albedo of evergreen surface `EveTr` on day 0 of run
  suews-related variables: :option:`albEveTr0 <suews:albEveTr0>`
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
albgrass_id:
  type:
    input: state
  description: Albedo of grass surface `Grass` on day 0 of run
  suews-related variables: :option:`albGrass0 <suews:albGrass0>`
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
albmax_dectr:
  type:
    input: state
  description: Effective surface albedo (middle of the day value) for summertime.
  suews-related variables: :option:`AlbedoMax <suews:AlbedoMax>`
  path_loading:
    Code_DecTr: AlbedoMax
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
albmax_evetr:
  type:
    input: state
  description: Effective surface albedo (middle of the day value) for summertime.
  suews-related variables: :option:`AlbedoMax <suews:AlbedoMax>`
  path_loading:
    Code_EveTr: AlbedoMax
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
albmax_grass:
  type:
    input: state
  description: Effective surface albedo (middle of the day value) for summertime.
  suews-related variables: :option:`AlbedoMax <suews:AlbedoMax>`
  path_loading:
    Code_Grass: AlbedoMax
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
albmin_dectr:
  type:
    input: state
  description:
    Effective surface albedo (middle of the day value) for wintertime (not
    including snow).
  suews-related variables: :option:`AlbedoMin <suews:AlbedoMin>`
  path_loading:
    Code_DecTr: AlbedoMin
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
albmin_evetr:
  type:
    input: state
  description:
    Effective surface albedo (middle of the day value) for wintertime (not
    including snow).
  suews-related variables: :option:`AlbedoMin <suews:AlbedoMin>`
  path_loading:
    Code_EveTr: AlbedoMin
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
albmin_grass:
  type:
    input: state
  description:
    Effective surface albedo (middle of the day value) for wintertime (not
    including snow).
  suews-related variables: :option:`AlbedoMin <suews:AlbedoMin>`
  path_loading:
    Code_Grass: AlbedoMin
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
alpha_bioco2:
  type:
    input: state
  description:
    The mean apparent ecosystem quantum. Represents the initial slope of
    the light-response curve.
  suews-related variables: :option:`alpha <suews:alpha>`
  path_loading:
    Code_EveTr:
      BiogenCO2Code: alpha
    Code_DecTr:
      BiogenCO2Code: alpha
    Code_Grass:
      BiogenCO2Code: alpha
  data dimensions:
    - (3,)
    - remarks: "3: { `suews:EveTr`, `suews:DecTr`, `suews:Grass`}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
alpha_enh_bioco2:
  type:
    input: state
  description: Part of the `alpha` coefficient related to the fraction of vegetation.
  suews-related variables: :option:`alpha_enh <suews:alpha_enh>`
  path_loading:
    Code_EveTr:
      BiogenCO2Code: alpha_enh
    Code_DecTr:
      BiogenCO2Code: alpha_enh
    Code_Grass:
      BiogenCO2Code: alpha_enh
  data dimensions:
    - (3,)
    - remarks: "3: { `suews:EveTr`, `suews:DecTr`, `suews:Grass`}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
alt:
  type:
    input: state
  description: Altitude of grids [m].
  suews-related variables: :option:`Alt <suews:Alt>`
  path_loading: Alt
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
baset:
  type:
    input: state
  description:
    "Base Temperature for initiating growing degree days (GDD) for leaf\
    \ growth. [\xB0C]"
  suews-related variables: :option:`BaseT <suews:BaseT>`
  path_loading:
    Code_EveTr: BaseT
    Code_DecTr: BaseT
    Code_Grass: BaseT
  data dimensions:
    - (3,)
    - remarks: "3: { `suews:EveTr`, `suews:DecTr`, `suews:Grass`}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
baset_cooling:
  type:
    input: state
  description: Critical cooling temperature.
  suews-related variables:
    :option:`TCritic_Cooling_WD <suews:TCritic_Cooling_WD>`,
    :option:`TCritic_Cooling_WE <suews:TCritic_Cooling_WE>`
  path_loading:
    AnthropogenicCode:
      - TCritic_Cooling_WD
      - TCritic_Cooling_WE
  data dimensions:
    - (2,)
    - remarks: "2: {Weekday, Weekend}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
baset_hc:
  type:
    input: state
  description: "Base temperature for heating degree days [\xB0C]"
  suews-related variables: :option:`BaseT_HC <suews:BaseT_HC>`
  path_loading:
    AnthropogenicCode: BaseT_HC
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
baset_heating:
  type:
    input: state
  description: Critical heating temperature.
  suews-related variables:
    :option:`TCritic_Heating_WD <suews:TCritic_Heating_WD>`,
    :option:`TCritic_Heating_WE <suews:TCritic_Heating_WE>`
  path_loading:
    AnthropogenicCode:
      - TCritic_Heating_WD
      - TCritic_Heating_WE
  data dimensions:
    - (2,)
    - remarks: "2: {Weekday, Weekend}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
basete:
  type:
    input: state
  description:
    "Base temperature for initiating sensesance degree days (SDD) for leaf\
    \ off. [\xB0C]"
  suews-related variables: :option:`BaseTe <suews:BaseTe>`
  path_loading:
    Code_EveTr: BaseTe
    Code_DecTr: BaseTe
    Code_Grass: BaseTe
  data dimensions:
    - (3,)
    - remarks: "3: { `suews:EveTr`, `suews:DecTr`, `suews:Grass`}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
basetmethod:
  type:
    input: state
  description: Determines method for base temperature used in HDD/CDD calculations.
  suews-related variables: :option:`BaseTMethod <suews:BaseTMethod>`
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
beta_bioco2:
  type:
    input: state
  description:
    The light-saturated gross photosynthesis of the canopy. [umol |m^-2|
    |s^-1| ]
  suews-related variables: :option:`beta <suews:beta>`
  path_loading:
    Code_EveTr:
      BiogenCO2Code: beta
    Code_DecTr:
      BiogenCO2Code: beta
    Code_Grass:
      BiogenCO2Code: beta
  data dimensions:
    - (3,)
    - remarks: "3: { `suews:EveTr`, `suews:DecTr`, `suews:Grass`}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
beta_enh_bioco2:
  type:
    input: state
  description: Part of the `beta` coefficient related to the fraction of vegetation.
  suews-related variables: :option:`beta_enh <suews:beta_enh>`
  path_loading:
    Code_EveTr:
      BiogenCO2Code: beta_enh
    Code_DecTr:
      BiogenCO2Code: beta_enh
    Code_Grass:
      BiogenCO2Code: beta_enh
  data dimensions:
    - (3,)
    - remarks: "3: { `suews:EveTr`, `suews:DecTr`, `suews:Grass`}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
bldgh:
  type:
    input: state
  description: Mean building height [m]
  suews-related variables: :option:`H_Bldgs <suews:H_Bldgs>`
  path_loading: H_Bldgs
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
capmax_dec:
  type:
    input: state
  description: Maximum water storage capacity for upper surfaces (i.e. canopy)
  suews-related variables: :option:`StorageMax <suews:StorageMax>`
  path_loading:
    Code_DecTr: StorageMax
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
capmin_dec:
  type:
    input: state
  description: Minimum water storage capacity for upper surfaces (i.e. canopy).
  suews-related variables: :option:`StorageMin <suews:StorageMin>`
  path_loading:
    Code_DecTr: StorageMin
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
chanohm:
  type:
    input: state
  description: Bulk transfer coefficient for this surface to use in AnOHM [-]
  suews-related variables: :option:`AnOHM_Ch <suews:AnOHM_Ch>`
  path_loading:
    Code_Paved: AnOHM_Ch
    Code_Bldgs: AnOHM_Ch
    Code_EveTr: AnOHM_Ch
    Code_DecTr: AnOHM_Ch
    Code_Grass: AnOHM_Ch
    Code_Bsoil: AnOHM_Ch
    Code_Water: AnOHM_Ch
  data dimensions:
    - (7,)
    - remarks:
        "7: { `suews:Paved`, `suews:Bldgs`, `suews:EveTr`, `suews:DecTr`, `suews:Grass`,
        `suews:BSoil`, `suews:Water`}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
co2pointsource:
  type:
    input: state
  description: CO2 emission factor [kg |km^-1|]
  suews-related variables: :option:`CO2PointSource <suews:CO2PointSource>`
  path_loading:
    AnthropogenicCode: CO2PointSource
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
cpanohm:
  type:
    input: state
  description: Volumetric heat capacity for this surface to use in AnOHM [J |m^-3|]
  suews-related variables: :option:`AnOHM_Cp <suews:AnOHM_Cp>`
  path_loading:
    Code_Paved: AnOHM_Cp
    Code_Bldgs: AnOHM_Cp
    Code_EveTr: AnOHM_Cp
    Code_DecTr: AnOHM_Cp
    Code_Grass: AnOHM_Cp
    Code_Bsoil: AnOHM_Cp
    Code_Water: AnOHM_Cp
  data dimensions:
    - (7,)
    - remarks:
        "7: { `suews:Paved`, `suews:Bldgs`, `suews:EveTr`, `suews:DecTr`, `suews:Grass`,
        `suews:BSoil`, `suews:Water`}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
crwmax:
  type:
    input: state
  description: Maximum water holding capacity of snow [mm]
  suews-related variables: :option:`CRWMax <suews:CRWMax>`
  path_loading:
    SnowCode: CRWMax
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
crwmin:
  type:
    input: state
  description: Minimum water holding capacity of snow [mm]
  suews-related variables: :option:`CRWMin <suews:CRWMin>`
  path_loading:
    SnowCode: CRWMin
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
daywat:
  type:
    input: state
  description: "Irrigation flag: 1 for on and 0 for off."
  suews-related variables:
    :option:`DayWat(1) <suews:DayWat(1)>`, :option:`DayWat(2)
    <suews:DayWat(2)>`, :option:`DayWat(3) <suews:DayWat(3)>`, :option:`DayWat(4)
    <suews:DayWat(4)>`, :option:`DayWat(5) <suews:DayWat(5)>`, :option:`DayWat(6)
    <suews:DayWat(6)>`, :option:`DayWat(7) <suews:DayWat(7)>`
  path_loading:
    IrrigationCode:
      - DayWat(1)
      - DayWat(2)
      - DayWat(3)
      - DayWat(4)
      - DayWat(5)
      - DayWat(6)
      - DayWat(7)
  data dimensions:
    - (7,)
    - remarks: "7: {Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
daywatper:
  type:
    input: state
  description: Fraction of properties using irrigation for each day of a week.
  suews-related variables:
    :option:`DayWatPer(1) <suews:DayWatPer(1)>`, :option:`DayWatPer(2)
    <suews:DayWatPer(2)>`, :option:`DayWatPer(3) <suews:DayWatPer(3)>`, :option:`DayWatPer(4)
    <suews:DayWatPer(4)>`, :option:`DayWatPer(5) <suews:DayWatPer(5)>`, :option:`DayWatPer(6)
    <suews:DayWatPer(6)>`, :option:`DayWatPer(7) <suews:DayWatPer(7)>`
  path_loading:
    IrrigationCode:
      - DayWatPer(1)
      - DayWatPer(2)
      - DayWatPer(3)
      - DayWatPer(4)
      - DayWatPer(5)
      - DayWatPer(6)
      - DayWatPer(7)
  data dimensions:
    - (7,)
    - remarks: "7: {Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
decidcap_id:
  type:
    input: state
  description: Storage capacity of deciduous surface `DecTr` on day 0 of run.
  suews-related variables: :option:`decidCap0 <suews:decidCap0>`
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
dectreeh:
  type:
    input: state
  description: Mean height of deciduous trees [m]
  suews-related variables: :option:`H_DecTr <suews:H_DecTr>`
  path_loading: H_DecTr
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
diagmethod:
  type:
    input: state
  description: Defines how near surface diagnostics are calculated.
  suews-related variables: :option:`DiagMethod <suews:DiagMethod>`
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
diagnose:
  type:
    input: state
  description: Internal use. Please DO NOT modify
  suews-related variables: None
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
diagqn:
  type:
    input: state
  description: Internal use. Please DO NOT modify
  suews-related variables: None
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
diagqs:
  type:
    input: state
  description: Internal use. Please DO NOT modify
  suews-related variables: None
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
drainrt:
  type:
    input: state
  description: Drainage rate of bucket for LUMPS [mm |h^-1|]
  suews-related variables: :option:`LUMPS_DrRate <suews:LUMPS_DrRate>`
  path_loading: LUMPS_DrRate
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
ef_umolco2perj:
  type:
    input: state
  description: Emission factor for fuels used for building heating.
  suews-related variables: :option:`EF_umolCO2perJ <suews:EF_umolCO2perJ>`
  path_loading:
    AnthropogenicCode: EF_umolCO2perJ
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
emis:
  type:
    input: state
  description: Effective surface emissivity.
  suews-related variables: :option:`Emissivity <suews:Emissivity>`
  path_loading:
    Code_Paved: Emissivity
    Code_Bldgs: Emissivity
    Code_EveTr: Emissivity
    Code_DecTr: Emissivity
    Code_Grass: Emissivity
    Code_Bsoil: Emissivity
    Code_Water: Emissivity
  data dimensions:
    - (7,)
    - remarks:
        "7: { `suews:Paved`, `suews:Bldgs`, `suews:EveTr`, `suews:DecTr`, `suews:Grass`,
        `suews:BSoil`, `suews:Water`}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
emissionsmethod:
  type:
    input: state
  description: Determines method for QF calculation.
  suews-related variables: :option:`EmissionsMethod <suews:EmissionsMethod>`
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
enddls:
  type:
    input: state
  description: End of the day light savings [DOY]
  suews-related variables: :option:`EndDLS <suews:EndDLS>`
  path_loading: EndDLS
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
enef_v_jkm:
  type:
    input: state
  description: Emission factor for heat [J k |m^-1| ].
  suews-related variables: :option:`EnEF_v_Jkm <suews:EnEF_v_Jkm>`
  path_loading:
    AnthropogenicCode: EnEF_v_Jkm
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
evapmethod:
  type:
    input: state
  description: Internal use. Please DO NOT modify
  suews-related variables: None
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
evetreeh:
  type:
    input: state
  description: Mean height of evergreen trees [m]
  suews-related variables: :option:`H_EveTr <suews:H_EveTr>`
  path_loading: H_EveTr
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
faibldg:
  type:
    input: state
  description: Frontal area index for buildings [-]
  suews-related variables: :option:`FAI_Bldgs <suews:FAI_Bldgs>`
  path_loading: FAI_Bldgs
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
faidectree:
  type:
    input: state
  description: Frontal area index for deciduous trees [-]
  suews-related variables: :option:`FAI_DecTr <suews:FAI_DecTr>`
  path_loading: FAI_DecTr
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
faievetree:
  type:
    input: state
  description: Frontal area index for evergreen trees [-]
  suews-related variables: :option:`FAI_EveTr <suews:FAI_EveTr>`
  path_loading: FAI_EveTr
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
faut:
  type:
    input: state
  description: Fraction of irrigated area that is irrigated using automated systems
  suews-related variables: :option:`Faut <suews:Faut>`
  path_loading:
    IrrigationCode: Faut
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
fcef_v_kgkm:
  type:
    input: state
  description:
    CO2 emission factor for weekdays [kg |km^-1|];;CO2 emission factor
    for weekends [kg |km^-1|]
  suews-related variables:
    :option:`FcEF_v_kgkmWD <suews:FcEF_v_kgkmWD>`, :option:`FcEF_v_kgkmWE
    <suews:FcEF_v_kgkmWE>`
  path_loading:
    AnthropogenicCode:
      - FcEF_v_kgkmWD
      - FcEF_v_kgkmWE
  data dimensions:
    - (2,)
    - remarks: "2: {Weekday, Weekend}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
flowchange:
  type:
    input: state
  description: Difference in input and output flows for water surface [mm |h^-1|]
  suews-related variables: :option:`FlowChange <suews:FlowChange>`
  path_loading: FlowChange
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
frfossilfuel_heat:
  type:
    input: state
  description: Fraction of fossil fuels used for building heating [-]
  suews-related variables: :option:`FrFossilFuel_Heat <suews:FrFossilFuel_Heat>`
  path_loading:
    AnthropogenicCode: FrFossilFuel_Heat
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
frfossilfuel_nonheat:
  type:
    input: state
  description: Fraction of fossil fuels used for building energy use [-]
  suews-related variables: :option:`FrFossilFuel_NonHeat <suews:FrFossilFuel_NonHeat>`
  path_loading:
    AnthropogenicCode: FrFossilFuel_NonHeat
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
g1:
  type:
    input: state
  description: Related to maximum surface conductance [mm |s^-1|]
  suews-related variables: :option:`G1 <suews:G1>`
  path_loading:
    CondCode: G1
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
g2:
  type:
    input: state
  description: Related to Kdown dependence [W |m^-2|]
  suews-related variables: :option:`G2 <suews:G2>`
  path_loading:
    CondCode: G2
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
g3:
  type:
    input: state
  description: Related to VPD dependence [units depend on `gsModel`]
  suews-related variables: :option:`G3 <suews:G3>`
  path_loading:
    CondCode: G3
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
g4:
  type:
    input: state
  description: Related to VPD dependence [units depend on `gsModel`]
  suews-related variables: :option:`G4 <suews:G4>`
  path_loading:
    CondCode: G4
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
g5:
  type:
    input: state
  description: "Related to temperature dependence [\xB0C]"
  suews-related variables: :option:`G5 <suews:G5>`
  path_loading:
    CondCode: G5
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
g6:
  type:
    input: state
  description: Related to soil moisture dependence [|mm^-1|]
  suews-related variables: :option:`G6 <suews:G6>`
  path_loading:
    CondCode: G6
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
gddfull:
  type:
    input: state
  description:
    "The growing degree days (GDD) needed for full capacity of the leaf\
    \ area index (LAI) [\xB0C]."
  suews-related variables: :option:`GDDFull <suews:GDDFull>`
  path_loading:
    Code_EveTr: GDDFull
    Code_DecTr: GDDFull
    Code_Grass: GDDFull
  data dimensions:
    - (3,)
    - remarks: "3: { `suews:EveTr`, `suews:DecTr`, `suews:Grass`}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
ground_albedo_dir_mult_fact:
  type:
    input: state
  description: Internal use. Please DO NOT modify
  suews-related variables: None
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
gsmodel:
  type:
    input: state
  description: Formulation choice for conductance calculation.
  suews-related variables: :option:`gsModel <suews:gsModel>`
  path_loading:
    CondCode: gsModel
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
h_maintain:
  type:
    input: state
  description:
    water depth to maintain used in automatic irrigation (e.g., ponding
    water due to flooding irrigation in rice crop-field) [mm].
  suews-related variables: :option:`H_maintain <suews:H_maintain>`
  path_loading:
    IrrigationCode: H_maintain
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
humactivity_24hr:
  type:
    input: state
  description: Hourly profile values used in human activity calculation.
  suews-related variables:
    :option:`ActivityProfWD <suews:ActivityProfWD>`, :option:`ActivityProfWE
    <suews:ActivityProfWE>`
  path_loading:
    AnthropogenicCode:
      ActivityProfWD: ":"
      ActivityProfWE: ":"
  data dimensions:
    - (24, 2)
    - remarks: "24: hours of a day\n\n        2: {Weekday, Weekend}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
ie_a:
  type:
    input: state
  description: Coefficient for automatic irrigation model.
  suews-related variables:
    :option:`Ie_a1 <suews:Ie_a1>`, :option:`Ie_a2 <suews:Ie_a2>`,
    :option:`Ie_a3 <suews:Ie_a3>`
  path_loading:
    IrrigationCode:
      - Ie_a1
      - Ie_a2
      - Ie_a3
  data dimensions:
    - (3,)
    - remarks: "3: { `suews:EveTr`, `suews:DecTr`, `suews:Grass`}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
ie_end:
  type:
    input: state
  description: Day when irrigation ends [DOY]
  suews-related variables: :option:`Ie_end <suews:Ie_end>`
  path_loading:
    IrrigationCode: Ie_end
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
ie_m:
  type:
    input: state
  description: Coefficient for manual irrigation model.
  suews-related variables:
    :option:`Ie_m1 <suews:Ie_m1>`, :option:`Ie_m2 <suews:Ie_m2>`,
    :option:`Ie_m3 <suews:Ie_m3>`
  path_loading:
    IrrigationCode:
      - Ie_m1
      - Ie_m2
      - Ie_m3
  data dimensions:
    - (3,)
    - remarks: "3: { `suews:EveTr`, `suews:DecTr`, `suews:Grass`}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
ie_start:
  type:
    input: state
  description: Day when irrigation starts [DOY]
  suews-related variables: :option:`Ie_start <suews:Ie_start>`
  path_loading:
    IrrigationCode: Ie_start
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
internalwateruse_h:
  type:
    input: state
  description: Internal water use [mm |h^-1|]
  suews-related variables: :option:`InternalWaterUse <suews:InternalWaterUse>`
  path_loading:
    IrrigationCode: InternalWaterUse
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
irrfracbldgs:
  type:
    input: state
  description: Fraction of `Bldgs` that is irrigated [-]
  suews-related variables: :option:`IrrFr_Bldgs <suews:IrrFr_Bldgs>`
  path_loading: IrrFr_Bldgs
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
irrfracbsoil:
  type:
    input: state
  description: Fraction of `BSoil` that is irrigated [-]
  suews-related variables: :option:`IrrFr_BSoil <suews:IrrFr_BSoil>`
  path_loading: IrrFr_BSoil
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
irrfracdectr:
  type:
    input: state
  description: Fraction of `DecTr` that is irrigated [-]
  suews-related variables: :option:`IrrFr_DecTr <suews:IrrFr_DecTr>`
  path_loading: IrrFr_DecTr
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
irrfracevetr:
  type:
    input: state
  description: Fraction of `EveTr` that is irrigated [-]
  suews-related variables: :option:`IrrFr_EveTr <suews:IrrFr_EveTr>`
  path_loading: IrrFr_EveTr
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
irrfracgrass:
  type:
    input: state
  description: Fraction of `Grass` that is irrigated [-]
  suews-related variables: :option:`IrrFr_Grass <suews:IrrFr_Grass>`
  path_loading: IrrFr_Grass
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
irrfracpaved:
  type:
    input: state
  description: Fraction of `Paved` that is irrigated [-]
  suews-related variables: :option:`IrrFr_Paved <suews:IrrFr_Paved>`
  path_loading: IrrFr_Paved
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
irrfracwater:
  type:
    input: state
  description: Fraction of `Water` that is irrigated [-]
  suews-related variables: :option:`IrrFr_Water <suews:IrrFr_Water>`
  path_loading: IrrFr_Water
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
kkanohm:
  type:
    input: state
  description: Thermal conductivity for this surface to use in AnOHM [W m |K^-1|]
  suews-related variables: :option:`AnOHM_Kk <suews:AnOHM_Kk>`
  path_loading:
    Code_Paved: AnOHM_Kk
    Code_Bldgs: AnOHM_Kk
    Code_EveTr: AnOHM_Kk
    Code_DecTr: AnOHM_Kk
    Code_Grass: AnOHM_Kk
    Code_Bsoil: AnOHM_Kk
    Code_Water: AnOHM_Kk
  data dimensions:
    - (7,)
    - remarks:
        "7: { `suews:Paved`, `suews:Bldgs`, `suews:EveTr`, `suews:DecTr`, `suews:Grass`,
        `suews:BSoil`, `suews:Water`}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
kmax:
  type:
    input: state
  description: Maximum incoming shortwave radiation [W |m^-2|]
  suews-related variables: :option:`Kmax <suews:Kmax>`
  path_loading:
    CondCode: Kmax
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
lai_id:
  type:
    input: state
  description: Initial LAI values.
  suews-related variables:
    :option:`LAIinitialDecTr <suews:LAIinitialDecTr>`, :option:`LAIinitialEveTr
    <suews:LAIinitialEveTr>`, :option:`LAIinitialGrass <suews:LAIinitialGrass>`
  data dimensions:
    - (3,)
    - remarks: "3: { `suews:EveTr`, `suews:DecTr`, `suews:Grass`}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
laicalcyes:
  type:
    input: state
  description: Internal use. Please DO NOT modify
  suews-related variables: None
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
laimax:
  type:
    input: state
  description: full leaf-on summertime value
  suews-related variables: :option:`LAIMax <suews:LAIMax>`
  path_loading:
    Code_EveTr: LAIMax
    Code_DecTr: LAIMax
    Code_Grass: LAIMax
  data dimensions:
    - (3,)
    - remarks: "3: { `suews:EveTr`, `suews:DecTr`, `suews:Grass`}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
laimin:
  type:
    input: state
  description: leaf-off wintertime value
  suews-related variables: :option:`LAIMin <suews:LAIMin>`
  path_loading:
    Code_EveTr: LAIMin
    Code_DecTr: LAIMin
    Code_Grass: LAIMin
  data dimensions:
    - (3,)
    - remarks: "3: { `suews:EveTr`, `suews:DecTr`, `suews:Grass`}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
laipower:
  type:
    input: state
  description: parameters required by LAI calculation.
  suews-related variables:
    :option:`LeafGrowthPower1 <suews:LeafGrowthPower1>`, :option:`LeafGrowthPower2
    <suews:LeafGrowthPower2>`, :option:`LeafOffPower1 <suews:LeafOffPower1>`, :option:`LeafOffPower2
    <suews:LeafOffPower2>`
  path_loading:
    Code_EveTr:
      - LeafGrowthPower1
      - LeafGrowthPower2
      - LeafOffPower1
      - LeafOffPower2
    Code_DecTr:
      - LeafGrowthPower1
      - LeafGrowthPower2
      - LeafOffPower1
      - LeafOffPower2
    Code_Grass:
      - LeafGrowthPower1
      - LeafGrowthPower2
      - LeafOffPower1
      - LeafOffPower2
  data dimensions:
    - (4, 3)
    - remarks:
        "4: {`LeafGrowthPower1`, `LeafGrowthPower2`, `LeafOffPower1`, `LeafOffPower2`}\n\
        \n        3: { `suews:EveTr`, `suews:DecTr`, `suews:Grass`}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
laitype:
  type:
    input: state
  description: LAI calculation choice.
  suews-related variables: :option:`LAIEq <suews:LAIEq>`
  path_loading:
    Code_EveTr: LAIEq
    Code_DecTr: LAIEq
    Code_Grass: LAIEq
  data dimensions:
    - (3,)
    - remarks: "3: { `suews:EveTr`, `suews:DecTr`, `suews:Grass`}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
lat:
  type:
    input: state
  description: Latitude [deg].
  suews-related variables: :option:`lat <suews:lat>`
  path_loading: lat
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
lng:
  type:
    input: state
  description: longitude [deg]
  suews-related variables: :option:`lng <suews:lng>`
  path_loading: lng
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
maxconductance:
  type:
    input: state
  description: The maximum conductance of each vegetation or surface type. [mm |s^-1|]
  suews-related variables: :option:`MaxConductance <suews:MaxConductance>`
  path_loading:
    Code_EveTr: MaxConductance
    Code_DecTr: MaxConductance
    Code_Grass: MaxConductance
  data dimensions:
    - (3,)
    - remarks: "3: { `suews:EveTr`, `suews:DecTr`, `suews:Grass`}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
maxfcmetab:
  type:
    input: state
  description: Maximum (day) CO2 from human metabolism. [W |m^-2|]
  suews-related variables: :option:`MaxFCMetab <suews:MaxFCMetab>`
  path_loading:
    AnthropogenicCode: MaxFCMetab
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
maxqfmetab:
  type:
    input: state
  description: Maximum value for human heat emission. [W |m^-2|]
  suews-related variables: :option:`MaxQFMetab <suews:MaxQFMetab>`
  path_loading:
    AnthropogenicCode: MaxQFMetab
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
min_res_bioco2:
  type:
    input: state
  description:
    Minimum soil respiration rate (for cold-temperature limit) [umol |m^-2|
    |s^-1|].
  suews-related variables: :option:`min_respi <suews:min_respi>`
  path_loading:
    Code_EveTr:
      BiogenCO2Code: min_respi
    Code_DecTr:
      BiogenCO2Code: min_respi
    Code_Grass:
      BiogenCO2Code: min_respi
  data dimensions:
    - (3,)
    - remarks: "3: { `suews:EveTr`, `suews:DecTr`, `suews:Grass`}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
minfcmetab:
  type:
    input: state
  description: Minimum (night) CO2 from human metabolism. [W |m^-2|]
  suews-related variables: :option:`MinFCMetab <suews:MinFCMetab>`
  path_loading:
    AnthropogenicCode: MinFCMetab
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
minqfmetab:
  type:
    input: state
  description: Minimum value for human heat emission. [W |m^-2|]
  suews-related variables: :option:`MinQFMetab <suews:MinQFMetab>`
  path_loading:
    AnthropogenicCode: MinQFMetab
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
n_stream_lw_urban:
  type:
    input: state
  description: Internal use. Please DO NOT modify
  suews-related variables: None
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
n_stream_sw_urban:
  type:
    input: state
  description: Internal use. Please DO NOT modify
  suews-related variables: None
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
n_vegetation_region_urban:
  type:
    input: state
  description: Internal use. Please DO NOT modify
  suews-related variables: None
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
narp_emis_snow:
  type:
    input: state
  description: Effective surface emissivity.
  suews-related variables: :option:`Emissivity <suews:Emissivity>`
  path_loading:
    SnowCode: Emissivity
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
narp_trans_site:
  type:
    input: state
  description: Atmospheric transmissivity for NARP [-]
  suews-related variables: :option:`NARP_Trans <suews:NARP_Trans>`
  path_loading: NARP_Trans
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
netradiationmethod:
  type:
    input: state
  description: Determines method for calculation of radiation fluxes.
  suews-related variables: :option:`NetRadiationMethod <suews:NetRadiationMethod>`
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
ohm_coef:
  type:
    input: state
  description: Coefficients for OHM calculation.
  suews-related variables:
    :option:`a1 <suews:a1>`, :option:`a2 <suews:a2>`, :option:`a3
    <suews:a3>`
  path_loading:
    Code_Paved:
      OHMCode_SummerWet:
        - a1
        - a2
        - a3
      OHMCode_SummerDry:
        - a1
        - a2
        - a3
      OHMCode_WinterWet:
        - a1
        - a2
        - a3
      OHMCode_WinterDry:
        - a1
        - a2
        - a3
    Code_Bldgs:
      OHMCode_SummerWet:
        - a1
        - a2
        - a3
      OHMCode_SummerDry:
        - a1
        - a2
        - a3
      OHMCode_WinterWet:
        - a1
        - a2
        - a3
      OHMCode_WinterDry:
        - a1
        - a2
        - a3
    Code_EveTr:
      OHMCode_SummerWet:
        - a1
        - a2
        - a3
      OHMCode_SummerDry:
        - a1
        - a2
        - a3
      OHMCode_WinterWet:
        - a1
        - a2
        - a3
      OHMCode_WinterDry:
        - a1
        - a2
        - a3
    Code_DecTr:
      OHMCode_SummerWet:
        - a1
        - a2
        - a3
      OHMCode_SummerDry:
        - a1
        - a2
        - a3
      OHMCode_WinterWet:
        - a1
        - a2
        - a3
      OHMCode_WinterDry:
        - a1
        - a2
        - a3
    Code_Grass:
      OHMCode_SummerWet:
        - a1
        - a2
        - a3
      OHMCode_SummerDry:
        - a1
        - a2
        - a3
      OHMCode_WinterWet:
        - a1
        - a2
        - a3
      OHMCode_WinterDry:
        - a1
        - a2
        - a3
    Code_Bsoil:
      OHMCode_SummerWet:
        - a1
        - a2
        - a3
      OHMCode_SummerDry:
        - a1
        - a2
        - a3
      OHMCode_WinterWet:
        - a1
        - a2
        - a3
      OHMCode_WinterDry:
        - a1
        - a2
        - a3
    Code_Water:
      OHMCode_SummerWet:
        - a1
        - a2
        - a3
      OHMCode_SummerDry:
        - a1
        - a2
        - a3
      OHMCode_WinterWet:
        - a1
        - a2
        - a3
      OHMCode_WinterDry:
        - a1
        - a2
        - a3
    SnowCode:
      OHMCode_SummerWet:
        - a1
        - a2
        - a3
      OHMCode_SummerDry:
        - a1
        - a2
        - a3
      OHMCode_WinterWet:
        - a1
        - a2
        - a3
      OHMCode_WinterDry:
        - a1
        - a2
        - a3
  data dimensions:
    - (8, 4, 3)
    - remarks:
        "8: { `suews:Paved`, `suews:Bldgs`, `suews:EveTr`, `suews:DecTr`, `suews:Grass`,\
        \ `suews:BSoil`, `suews:Water`, one extra land cover type (currently NOT used)}\n\
        \n        4: {SummerWet, SummerDry, WinterWet, WinterDry}\n\n        3: {a1,\
        \ a2, a3}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
ohm_threshsw:
  type:
    input: state
  description:
    "Temperature threshold determining whether summer/winter OHM coefficients\
    \ are applied [\xB0C]"
  suews-related variables: :option:`OHMThresh_SW <suews:OHMThresh_SW>`
  path_loading:
    Code_Paved: OHMThresh_SW
    Code_Bldgs: OHMThresh_SW
    Code_EveTr: OHMThresh_SW
    Code_DecTr: OHMThresh_SW
    Code_Grass: OHMThresh_SW
    Code_Bsoil: OHMThresh_SW
    Code_Water: OHMThresh_SW
    SnowCode: OHMThresh_SW
  data dimensions:
    - (8,)
    - remarks:
        "8: { `suews:Paved`, `suews:Bldgs`, `suews:EveTr`, `suews:DecTr`, `suews:Grass`,
        `suews:BSoil`, `suews:Water`, one extra land cover type (currently NOT used)} "
  physics scheme:
    scheme to add:
      - code 1
      - code 2
ohm_threshwd:
  type:
    input: state
  description:
    Soil moisture threshold determining whether wet/dry OHM coefficients
    are applied [-]
  suews-related variables: :option:`OHMThresh_WD <suews:OHMThresh_WD>`
  path_loading:
    Code_Paved: OHMThresh_WD
    Code_Bldgs: OHMThresh_WD
    Code_EveTr: OHMThresh_WD
    Code_DecTr: OHMThresh_WD
    Code_Grass: OHMThresh_WD
    Code_Bsoil: OHMThresh_WD
    Code_Water: OHMThresh_WD
    SnowCode: OHMThresh_WD
  data dimensions:
    - (8,)
    - remarks:
        "8: { `suews:Paved`, `suews:Bldgs`, `suews:EveTr`, `suews:DecTr`, `suews:Grass`,
        `suews:BSoil`, `suews:Water`, one extra land cover type (currently NOT used)} "
  physics scheme:
    scheme to add:
      - code 1
      - code 2
ohmincqf:
  type:
    input: state
  description:
    Determines whether the storage heat flux calculation uses |Qstar| or
    ( |Qstar| +QF).
  suews-related variables: :option:`OHMIncQF <suews:OHMIncQF>`
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
pipecapacity:
  type:
    input: state
  description: Storage capacity of pipes [mm]
  suews-related variables: :option:`PipeCapacity <suews:PipeCapacity>`
  path_loading: PipeCapacity
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
popdensdaytime:
  type:
    input: state
  description: Daytime population density (i.e. workers, tourists) [people |ha^-1|]
  suews-related variables: :option:`PopDensDay <suews:PopDensDay>`
  path_loading:
    - PopDensDay
    - PopDensDay
  data dimensions:
    - (2,)
    - remarks: "2: {Weekday, Weekend}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
popdensnighttime:
  type:
    input: state
  description: Night-time population density (i.e. residents) [people |ha^-1|]
  suews-related variables: :option:`PopDensNight <suews:PopDensNight>`
  path_loading: PopDensNight
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
popprof_24hr:
  type:
    input: state
  description: Hourly profile values used in dynamic population estimation.
  suews-related variables:
    :option:`PopProfWD <suews:PopProfWD>`, :option:`PopProfWE
    <suews:PopProfWE>`
  path_loading:
    AnthropogenicCode:
      PopProfWD: ":"
      PopProfWE: ":"
  data dimensions:
    - (24, 2)
    - remarks: "24: hours of a day\n\n        2: {Weekday, Weekend}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
pormax_dec:
  type:
    input: state
  description:
    full leaf-on summertime value Used only for `DecTr` (can affect roughness
    calculation)
  suews-related variables: :option:`PorosityMax <suews:PorosityMax>`
  path_loading:
    Code_DecTr: PorosityMax
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
pormin_dec:
  type:
    input: state
  description:
    leaf-off wintertime value Used only for `DecTr` (can affect roughness
    calculation)
  suews-related variables: :option:`PorosityMin <suews:PorosityMin>`
  path_loading:
    Code_DecTr: PorosityMin
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
porosity_id:
  type:
    input: state
  description: Porosity of deciduous vegetation on day 0 of run.
  suews-related variables: :option:`porosity0 <suews:porosity0>`
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
preciplimit:
  type:
    input: state
  description: "Temperature limit when precipitation falls as snow [\xB0C]"
  suews-related variables: :option:`PrecipLimSnow <suews:PrecipLimSnow>`
  path_loading:
    SnowCode: PrecipLimSnow
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
preciplimitalb:
  type:
    input: state
  description:
    Limit for hourly precipitation when the ground is fully covered with
    snow [mm]
  suews-related variables: :option:`PrecipLimAlb <suews:PrecipLimAlb>`
  path_loading:
    SnowCode: PrecipLimAlb
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
qf0_beu:
  type:
    input: state
  description: Building energy use [W |m^-2|]
  suews-related variables:
    :option:`QF0_BEU_WD <suews:QF0_BEU_WD>`, :option:`QF0_BEU_WE
    <suews:QF0_BEU_WE>`
  path_loading:
    - QF0_BEU_WD
    - QF0_BEU_WE
  data dimensions:
    - (2,)
    - remarks: "2: {Weekday, Weekend}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
qf_a:
  type:
    input: state
  description: Base value for QF calculation.
  suews-related variables: :option:`QF_A_WD <suews:QF_A_WD>`, :option:`QF_A_WE <suews:QF_A_WE>`
  path_loading:
    AnthropogenicCode:
      - QF_A_WD
      - QF_A_WE
  data dimensions:
    - (2,)
    - remarks: "2: {Weekday, Weekend}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
qf_b:
  type:
    input: state
  description: Parameter related to heating degree days.
  suews-related variables: :option:`QF_B_WD <suews:QF_B_WD>`, :option:`QF_B_WE <suews:QF_B_WE>`
  path_loading:
    AnthropogenicCode:
      - QF_B_WD
      - QF_B_WE
  data dimensions:
    - (2,)
    - remarks: "2: {Weekday, Weekend}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
qf_c:
  type:
    input: state
  description: Parameter related to heating degree days.
  suews-related variables: :option:`QF_C_WD <suews:QF_C_WD>`, :option:`QF_C_WE <suews:QF_C_WE>`
  path_loading:
    AnthropogenicCode:
      - QF_C_WD
      - QF_C_WE
  data dimensions:
    - (2,)
    - remarks: "2: {Weekday, Weekend}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
radmeltfact:
  type:
    input: state
  description: Hourly radiation melt factor of snow [mm |w^-1| |h^-1|]
  suews-related variables: :option:`RadMeltFactor <suews:RadMeltFactor>`
  path_loading:
    SnowCode: RadMeltFactor
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
raincover:
  type:
    input: state
  description: Limit when surface totally covered with water for LUMPS [mm]
  suews-related variables: :option:`LUMPS_Cover <suews:LUMPS_Cover>`
  path_loading: LUMPS_Cover
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
rainmaxres:
  type:
    input: state
  description:
    Maximum water bucket reservoir [mm] Used for LUMPS surface wetness
    control.
  suews-related variables: :option:`LUMPS_MaxRes <suews:LUMPS_MaxRes>`
  path_loading: LUMPS_MaxRes
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
resp_a:
  type:
    input: state
  description: Respiration coefficient a.
  suews-related variables: :option:`resp_a <suews:resp_a>`
  path_loading:
    Code_EveTr:
      BiogenCO2Code: resp_a
    Code_DecTr:
      BiogenCO2Code: resp_a
    Code_Grass:
      BiogenCO2Code: resp_a
  data dimensions:
    - (3,)
    - remarks: "3: { `suews:EveTr`, `suews:DecTr`, `suews:Grass`}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
resp_b:
  type:
    input: state
  description: Respiration coefficient b - related to air temperature dependency.
  suews-related variables: :option:`resp_b <suews:resp_b>`
  path_loading:
    Code_EveTr:
      BiogenCO2Code: resp_b
    Code_DecTr:
      BiogenCO2Code: resp_b
    Code_Grass:
      BiogenCO2Code: resp_b
  data dimensions:
    - (3,)
    - remarks: "3: { `suews:EveTr`, `suews:DecTr`, `suews:Grass`}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
roughlenheatmethod:
  type:
    input: state
  description: Determines method for calculating roughness length for heat.
  suews-related variables: :option:`RoughLenHeatMethod <suews:RoughLenHeatMethod>`
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
roughlenmommethod:
  type:
    input: state
  description:
    Determines how aerodynamic roughness length (z0m) and zero displacement
    height (zdm) are calculated.
  suews-related variables: :option:`RoughLenMomMethod <suews:RoughLenMomMethod>`
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
runofftowater:
  type:
    input: state
  description:
    Fraction of above-ground runoff flowing to water surface during flooding
    [-]
  suews-related variables: :option:`RunoffToWater <suews:RunoffToWater>`
  path_loading: RunoffToWater
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
s1:
  type:
    input: state
  description: A parameter related to soil moisture dependence [-]
  suews-related variables: :option:`S1 <suews:S1>`
  path_loading:
    CondCode: S1
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
s2:
  type:
    input: state
  description: A parameter related to soil moisture dependence [mm]
  suews-related variables: :option:`S2 <suews:S2>`
  path_loading:
    CondCode: S2
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
sathydraulicconduct:
  type:
    input: state
  description: Hydraulic conductivity for saturated soil [mm |s^-1|]
  suews-related variables: :option:`SatHydraulicCond <suews:SatHydraulicCond>`
  path_loading:
    Code_Paved:
      SoilTypeCode: SatHydraulicCond
    Code_Bldgs:
      SoilTypeCode: SatHydraulicCond
    Code_EveTr:
      SoilTypeCode: SatHydraulicCond
    Code_DecTr:
      SoilTypeCode: SatHydraulicCond
    Code_Grass:
      SoilTypeCode: SatHydraulicCond
    Code_Bsoil:
      SoilTypeCode: SatHydraulicCond
    const: 0.0
  data dimensions:
    - (7,)
    - remarks:
        "7: { `suews:Paved`, `suews:Bldgs`, `suews:EveTr`, `suews:DecTr`, `suews:Grass`,
        `suews:BSoil`, `suews:Water`}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
sddfull:
  type:
    input: state
  description:
    "The sensesence degree days (SDD) needed to initiate leaf off. [\xB0\
    C]"
  suews-related variables: :option:`SDDFull <suews:SDDFull>`
  path_loading:
    Code_EveTr: SDDFull
    Code_DecTr: SDDFull
    Code_Grass: SDDFull
  data dimensions:
    - (3,)
    - remarks: "3: { `suews:EveTr`, `suews:DecTr`, `suews:Grass`}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
sfr_surf:
  type:
    input: state
  description: Surface cover fractions.
  suews-related variables:
    :option:`Fr_Bldgs <suews:Fr_Bldgs>`, :option:`Fr_Bsoil
    <suews:Fr_Bsoil>`, :option:`Fr_DecTr <suews:Fr_DecTr>`, :option:`Fr_EveTr <suews:Fr_EveTr>`,
    :option:`Fr_Grass <suews:Fr_Grass>`, :option:`Fr_Paved <suews:Fr_Paved>`, :option:`Fr_Water
    <suews:Fr_Water>`
  path_loading:
    - Fr_Paved
    - Fr_Bldgs
    - Fr_EveTr
    - Fr_DecTr
    - Fr_Grass
    - Fr_Bsoil
    - Fr_Water
  data dimensions:
    - (7,)
    - remarks:
        "7: { `suews:Paved`, `suews:Bldgs`, `suews:EveTr`, `suews:DecTr`, `suews:Grass`,
        `suews:BSoil`, `suews:Water`}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
smdmethod:
  type:
    input: state
  description: Determines method for calculating soil moisture deficit (SMD).
  suews-related variables: :option:`SMDMethod <suews:SMDMethod>`
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
snowalb:
  type:
    input: state
  description: Initial snow albedo
  suews-related variables: :option:`SnowAlb0 <suews:SnowAlb0>`
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
snowalbmax:
  type:
    input: state
  description: Effective surface albedo (middle of the day value) for summertime.
  suews-related variables: :option:`AlbedoMax <suews:AlbedoMax>`
  path_loading:
    SnowCode: AlbedoMax
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
snowalbmin:
  type:
    input: state
  description:
    Effective surface albedo (middle of the day value) for wintertime (not
    including snow).
  suews-related variables: :option:`AlbedoMin <suews:AlbedoMin>`
  path_loading:
    SnowCode: AlbedoMin
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
snowdens:
  type:
    input: state
  description: Initial snow density of each land cover.
  suews-related variables:
    :option:`SnowDensBldgs <suews:SnowDensBldgs>`, :option:`SnowDensPaved
    <suews:SnowDensPaved>`, :option:`SnowDensDecTr <suews:SnowDensDecTr>`, :option:`SnowDensEveTr
    <suews:SnowDensEveTr>`, :option:`SnowDensGrass <suews:SnowDensGrass>`, :option:`SnowDensBSoil
    <suews:SnowDensBSoil>`, :option:`SnowDensWater <suews:SnowDensWater>`
  data dimensions:
    - (7,)
    - remarks:
        "7: { `suews:Paved`, `suews:Bldgs`, `suews:EveTr`, `suews:DecTr`, `suews:Grass`,
        `suews:BSoil`, `suews:Water`}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
snowdensmax:
  type:
    input: state
  description: Maximum snow density [kg |m^-3|]
  suews-related variables: :option:`SnowDensMax <suews:SnowDensMax>`
  path_loading:
    SnowCode: SnowDensMax
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
snowdensmin:
  type:
    input: state
  description: Fresh snow density [kg |m^-3|]
  suews-related variables: :option:`SnowDensMin <suews:SnowDensMin>`
  path_loading:
    SnowCode: SnowDensMin
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
snowfrac:
  type:
    input: state
  description: Initial plan area fraction of snow on each land cover`
  suews-related variables:
    :option:`SnowFracBldgs <suews:SnowFracBldgs>`, :option:`SnowFracPaved
    <suews:SnowFracPaved>`, :option:`SnowFracDecTr <suews:SnowFracDecTr>`, :option:`SnowFracEveTr
    <suews:SnowFracEveTr>`, :option:`SnowFracGrass <suews:SnowFracGrass>`, :option:`SnowFracBSoil
    <suews:SnowFracBSoil>`, :option:`SnowFracWater <suews:SnowFracWater>`
  data dimensions:
    - (7,)
    - remarks:
        "7: { `suews:Paved`, `suews:Bldgs`, `suews:EveTr`, `suews:DecTr`, `suews:Grass`,
        `suews:BSoil`, `suews:Water`}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
snowlimbldg:
  type:
    input: state
  description:
    Limit of the snow water equivalent for snow removal from roads and
    roofs [mm]
  suews-related variables: :option:`SnowLimRemove <suews:SnowLimRemove>`
  path_loading:
    Code_Bldgs: SnowLimRemove
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
snowlimpaved:
  type:
    input: state
  description:
    Limit of the snow water equivalent for snow removal from roads and
    roofs [mm]
  suews-related variables: :option:`SnowLimRemove <suews:SnowLimRemove>`
  path_loading:
    Code_Paved: SnowLimRemove
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
snowpack:
  type:
    input: state
  description: Initial snow water equivalent on each land cover
  suews-related variables:
    :option:`SnowPackBldgs <suews:SnowPackBldgs>`, :option:`SnowPackPaved
    <suews:SnowPackPaved>`, :option:`SnowPackDecTr <suews:SnowPackDecTr>`, :option:`SnowPackEveTr
    <suews:SnowPackEveTr>`, :option:`SnowPackGrass <suews:SnowPackGrass>`, :option:`SnowPackBSoil
    <suews:SnowPackBSoil>`, :option:`SnowPackWater <suews:SnowPackWater>`
  data dimensions:
    - (7,)
    - remarks:
        "7: { `suews:Paved`, `suews:Bldgs`, `suews:EveTr`, `suews:DecTr`, `suews:Grass`,
        `suews:BSoil`, `suews:Water`}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
snowpacklimit:
  type:
    input: state
  description:
    Limit for the snow water equivalent when snow cover starts to be patchy
    [mm]
  suews-related variables: :option:`SnowLimPatch <suews:SnowLimPatch>`
  path_loading:
    Code_Paved: SnowLimPatch
    Code_Bldgs: SnowLimPatch
    Code_EveTr: SnowLimPatch
    Code_DecTr: SnowLimPatch
    Code_Grass: SnowLimPatch
    Code_Bsoil: SnowLimPatch
    const: 0.0
  data dimensions:
    - (7,)
    - remarks:
        "7: { `suews:Paved`, `suews:Bldgs`, `suews:EveTr`, `suews:DecTr`, `suews:Grass`,
        `suews:BSoil`, `suews:Water`}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
snowprof_24hr:
  type:
    input: state
  description: Hourly profile values used in snow clearing.
  suews-related variables:
    :option:`SnowClearingProfWD <suews:SnowClearingProfWD>`,
    :option:`SnowClearingProfWE <suews:SnowClearingProfWE>`
  path_loading:
    SnowClearingProfWD: ":"
    SnowClearingProfWE: ":"
  data dimensions:
    - (24, 2)
    - remarks: "24: hours of a day\n\n        2: {Weekday, Weekend}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
snowuse:
  type:
    input: state
  description: Determines whether the snow part of the model runs.
  suews-related variables: :option:`SnowUse <suews:SnowUse>`
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
snowwater:
  type:
    input: state
  description: Initial amount of liquid water in the snow on each land cover
  suews-related variables:
    :option:`SnowWaterBldgsState <suews:SnowWaterBldgsState>`,
    :option:`SnowWaterPavedState <suews:SnowWaterPavedState>`, :option:`SnowWaterDecTrState
    <suews:SnowWaterDecTrState>`, :option:`SnowWaterEveTrState <suews:SnowWaterEveTrState>`,
    :option:`SnowWaterGrassState <suews:SnowWaterGrassState>`, :option:`SnowWaterBSoilState
    <suews:SnowWaterBSoilState>`, :option:`SnowWaterWaterState <suews:SnowWaterWaterState>`
  data dimensions:
    - (7,)
    - remarks:
        "7: { `suews:Paved`, `suews:Bldgs`, `suews:EveTr`, `suews:DecTr`, `suews:Grass`,
        `suews:BSoil`, `suews:Water`}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
soildepth:
  type:
    input: state
  description: Depth of soil beneath the surface [mm]
  suews-related variables: :option:`SoilDepth <suews:SoilDepth>`
  path_loading:
    Code_Paved:
      SoilTypeCode: SoilDepth
    Code_Bldgs:
      SoilTypeCode: SoilDepth
    Code_EveTr:
      SoilTypeCode: SoilDepth
    Code_DecTr:
      SoilTypeCode: SoilDepth
    Code_Grass:
      SoilTypeCode: SoilDepth
    Code_Bsoil:
      SoilTypeCode: SoilDepth
    const: 0.0
  data dimensions:
    - (7,)
    - remarks:
        "7: { `suews:Paved`, `suews:Bldgs`, `suews:EveTr`, `suews:DecTr`, `suews:Grass`,
        `suews:BSoil`, `suews:Water`}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
soilstore_surf:
  type:
    input: state
  description:
    Initial water stored in soil beneath `Bldgs` surface [mm];;Initial
    water stored in soil beneath `Paved` surface [mm];;Initial water stored in soil
    beneath `DecTr` surface [mm];;Initial water stored in soil beneath `EveTr` surface
    [mm];;Initial water stored in soil beneath `Grass` surface [mm];;Initial water
    stored in soil beneath `BSoil` surface [mm]
  suews-related variables:
    :option:`SoilstoreBldgsState <suews:SoilstoreBldgsState>`,
    :option:`SoilstorePavedState <suews:SoilstorePavedState>`, :option:`SoilstoreDecTrState
    <suews:SoilstoreDecTrState>`, :option:`SoilstoreEveTrState <suews:SoilstoreEveTrState>`,
    :option:`SoilstoreGrassState <suews:SoilstoreGrassState>`, :option:`SoilstoreBSoilState
    <suews:SoilstoreBSoilState>`
  data dimensions:
    - (7,)
    - remarks:
        "7: { `suews:Paved`, `suews:Bldgs`, `suews:EveTr`, `suews:DecTr`, `suews:Grass`,
        `suews:BSoil`, `suews:Water`}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
soilstorecap_surf:
  type:
    input: state
  description: Limit value for `SoilDepth` [mm]
  suews-related variables: :option:`SoilStoreCap <suews:SoilStoreCap>`
  path_loading:
    Code_Paved:
      SoilTypeCode: SoilStoreCap
    Code_Bldgs:
      SoilTypeCode: SoilStoreCap
    Code_EveTr:
      SoilTypeCode: SoilStoreCap
    Code_DecTr:
      SoilTypeCode: SoilStoreCap
    Code_Grass:
      SoilTypeCode: SoilStoreCap
    Code_Bsoil:
      SoilTypeCode: SoilStoreCap
    const: 0.0
  data dimensions:
    - (7,)
    - remarks:
        "7: { `suews:Paved`, `suews:Bldgs`, `suews:EveTr`, `suews:DecTr`, `suews:Grass`,
        `suews:BSoil`, `suews:Water`}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
stabilitymethod:
  type:
    input: state
  description: Defines which atmospheric stability functions are used.
  suews-related variables: :option:`StabilityMethod <suews:StabilityMethod>`
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
startdls:
  type:
    input: state
  description: Start of the day light savings [DOY]
  suews-related variables: :option:`StartDLS <suews:StartDLS>`
  path_loading: StartDLS
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
state_surf:
  type:
    input: state
  description:
    Initial wetness condition on `Bldgs`;;Initial wetness condition on
    `Paved`;;Initial wetness condition on `DecTr`;;Initial wetness condition on `EveTr`;;Initial
    wetness condition on `Grass`;;Initial wetness condition on `BSoil`;;Initial wetness
    condition on `Water`
  suews-related variables:
    :option:`BldgsState <suews:BldgsState>`, :option:`PavedState
    <suews:PavedState>`, :option:`DecTrState <suews:DecTrState>`, :option:`EveTrState
    <suews:EveTrState>`, :option:`GrassState <suews:GrassState>`, :option:`BSoilState
    <suews:BSoilState>`, :option:`WaterState <suews:WaterState>`
  data dimensions:
    - (7,)
    - remarks:
        "7: { `suews:Paved`, `suews:Bldgs`, `suews:EveTr`, `suews:DecTr`, `suews:Grass`,
        `suews:BSoil`, `suews:Water`}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
statelimit_surf:
  type:
    input: state
  description: Upper limit to the surface state. [mm]
  suews-related variables: :option:`StateLimit <suews:StateLimit>`
  path_loading:
    Code_Paved: StateLimit
    Code_Bldgs: StateLimit
    Code_EveTr: StateLimit
    Code_DecTr: StateLimit
    Code_Grass: StateLimit
    Code_Bsoil: StateLimit
    Code_Water: StateLimit
  data dimensions:
    - (7,)
    - remarks:
        "7: { `suews:Paved`, `suews:Bldgs`, `suews:EveTr`, `suews:DecTr`, `suews:Grass`,
        `suews:BSoil`, `suews:Water`}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
storageheatmethod:
  type:
    input: state
  description: "Determines method for calculating storage heat flux \u0394QS."
  suews-related variables: :option:`StorageHeatMethod <suews:StorageHeatMethod>`
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
storedrainprm:
  type:
    input: state
  description: Coefficients used in drainage calculation.
  suews-related variables:
    :option:`DrainageCoef1 <suews:DrainageCoef1>`, :option:`DrainageCoef2
    <suews:DrainageCoef2>`, :option:`DrainageEq <suews:DrainageEq>`, :option:`StorageMax
    <suews:StorageMax>`, :option:`StorageMin <suews:StorageMin>`
  path_loading:
    - Code_Paved: StorageMin
      Code_Bldgs: StorageMin
      Code_EveTr: StorageMin
      Code_DecTr: StorageMin
      Code_Grass: StorageMin
      Code_Bsoil: StorageMin
      Code_Water: StorageMin
    - Code_Paved: DrainageEq
      Code_Bldgs: DrainageEq
      Code_EveTr: DrainageEq
      Code_DecTr: DrainageEq
      Code_Grass: DrainageEq
      Code_Bsoil: DrainageEq
      Code_Water: DrainageEq
    - Code_Paved: DrainageCoef1
      Code_Bldgs: DrainageCoef1
      Code_EveTr: DrainageCoef1
      Code_DecTr: DrainageCoef1
      Code_Grass: DrainageCoef1
      Code_Bsoil: DrainageCoef1
      Code_Water: DrainageCoef1
    - Code_Paved: DrainageCoef2
      Code_Bldgs: DrainageCoef2
      Code_EveTr: DrainageCoef2
      Code_DecTr: DrainageCoef2
      Code_Grass: DrainageCoef2
      Code_Bsoil: DrainageCoef2
      Code_Water: DrainageCoef2
    - Code_Paved: StorageMax
      Code_Bldgs: StorageMax
      Code_EveTr: StorageMax
      Code_DecTr: StorageMax
      Code_Grass: StorageMax
      Code_Bsoil: StorageMax
      Code_Water: StorageMax
    - Code_Paved: StorageMin
      Code_Bldgs: StorageMin
      Code_EveTr: StorageMin
      Code_DecTr: StorageMin
      Code_Grass: StorageMin
      Code_Bsoil: StorageMin
      Code_Water: StorageMin
  data dimensions:
    - (6, 7)
    - remarks:
        "6: { `StorageMin`, `DrainageEq`, `DrainageCoef1`, `DrainageCoef2`, `StorageMax`,\
        \ current storage}\n\n        7: { `suews:Paved`, `suews:Bldgs`, `suews:EveTr`,\
        \ `suews:DecTr`, `suews:Grass`, `suews:BSoil`, `suews:Water`}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
surfacearea:
  type:
    input: state
  description: Area of the grid [ha].
  suews-related variables: :option:`SurfaceArea <suews:SurfaceArea>`
  path_loading: SurfaceArea
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
sw_dn_direct_frac:
  type:
    input: state
  description: Internal use. Please DO NOT modify
  suews-related variables: None
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
tau_a:
  type:
    input: state
  description: Time constant for snow albedo aging in cold snow [-]
  suews-related variables: :option:`tau_a <suews:tau_a>`
  path_loading:
    SnowCode: tau_a
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
tau_f:
  type:
    input: state
  description: Time constant for snow albedo aging in melting snow [-]
  suews-related variables: :option:`tau_f <suews:tau_f>`
  path_loading:
    SnowCode: tau_f
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
tau_r:
  type:
    input: state
  description: Time constant for snow density ageing [-]
  suews-related variables: :option:`tau_r <suews:tau_r>`
  path_loading:
    SnowCode: tau_r
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
tempmeltfact:
  type:
    input: state
  description: Hourly temperature melt factor of snow [mm |K^-1| |h^-1|]
  suews-related variables: :option:`TempMeltFactor <suews:TempMeltFactor>`
  path_loading:
    SnowCode: TempMeltFactor
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
th:
  type:
    input: state
  description: "Upper air temperature limit [\xB0C]"
  suews-related variables: :option:`TH <suews:TH>`
  path_loading:
    CondCode: TH
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
theta_bioco2:
  type:
    input: state
  description: The convexity of the curve at light saturation.
  suews-related variables: :option:`theta <suews:theta>`
  path_loading:
    Code_EveTr:
      BiogenCO2Code: theta
    Code_DecTr:
      BiogenCO2Code: theta
    Code_Grass:
      BiogenCO2Code: theta
  data dimensions:
    - (3,)
    - remarks: "3: { `suews:EveTr`, `suews:DecTr`, `suews:Grass`}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
timezone:
  type:
    input: state
  description:
    Time zone [h] for site relative to UTC (east is positive). This should
    be set according to the times given in the meteorological forcing file(s).
  suews-related variables: :option:`Timezone <suews:Timezone>`
  path_loading: Timezone
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
tl:
  type:
    input: state
  description: "Lower air temperature limit [\xB0C]"
  suews-related variables: :option:`TL <suews:TL>`
  path_loading:
    CondCode: TL
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
trafficrate:
  type:
    input: state
  description: Traffic rate used for CO2 flux calculation.
  suews-related variables:
    :option:`TrafficRate_WD <suews:TrafficRate_WD>`, :option:`TrafficRate_WE
    <suews:TrafficRate_WE>`
  path_loading:
    - TrafficRate_WD
    - TrafficRate_WE
  data dimensions:
    - (2,)
    - remarks: "2: {Weekday, Weekend}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
trafficunits:
  type:
    input: state
  description: Units for the traffic rate for the study area. Not used in v2018a.
  suews-related variables: :option:`TrafficUnits <suews:TrafficUnits>`
  path_loading:
    AnthropogenicCode: TrafficUnits
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
traffprof_24hr:
  type:
    input: state
  description: Hourly profile values used in traffic activity calculation.
  suews-related variables:
    :option:`TraffProfWD <suews:TraffProfWD>`, :option:`TraffProfWE
    <suews:TraffProfWE>`
  path_loading:
    AnthropogenicCode:
      TraffProfWD: ":"
      TraffProfWE: ":"
  data dimensions:
    - (24, 2)
    - remarks: "24: hours of a day\n\n        2: {Weekday, Weekend}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
tstep:
  type:
    input: state
  description: Specifies the model time step [s].
  suews-related variables: :option:`Tstep <suews:Tstep>`
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
use_sw_direct_albedo:
  type:
    input: state
  description: Internal use. Please DO NOT modify
  suews-related variables: None
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
veg_contact_fraction_const:
  type:
    input: state
  description: Internal use. Please DO NOT modify
  suews-related variables: None
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
veg_fsd_const:
  type:
    input: state
  description: Internal use. Please DO NOT modify
  suews-related variables: None
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
veg_ssa_lw:
  type:
    input: state
  description: Internal use. Please DO NOT modify
  suews-related variables: None
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
veg_ssa_sw:
  type:
    input: state
  description: Internal use. Please DO NOT modify
  suews-related variables: None
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
veg_type:
  type:
    input: state
  description: Internal use. Please DO NOT modify
  suews-related variables: None
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
waterdist:
  type:
    input: state
  description: Fraction of water redistribution
  suews-related variables:
    :option:`ToBSoil <suews:ToBSoil>`, :option:`ToBldgs <suews:ToBldgs>`,
    :option:`ToDecTr <suews:ToDecTr>`, :option:`ToEveTr <suews:ToEveTr>`, :option:`ToGrass
    <suews:ToGrass>`, :option:`ToPaved <suews:ToPaved>`, :option:`ToRunoff <suews:ToRunoff>`,
    :option:`ToSoilStore <suews:ToSoilStore>`, :option:`ToWater <suews:ToWater>`
  path_loading:
    - WithinGridPavedCode: ToPaved
      WithinGridBldgsCode: ToPaved
      WithinGridEveTrCode: ToPaved
      WithinGridDecTrCode: ToPaved
      WithinGridGrassCode: ToPaved
      WithinGridUnmanBSoilCode: ToPaved
    - WithinGridPavedCode: ToBldgs
      WithinGridBldgsCode: ToBldgs
      WithinGridEveTrCode: ToBldgs
      WithinGridDecTrCode: ToBldgs
      WithinGridGrassCode: ToBldgs
      WithinGridUnmanBSoilCode: ToBldgs
    - WithinGridPavedCode: ToEveTr
      WithinGridBldgsCode: ToEveTr
      WithinGridEveTrCode: ToEveTr
      WithinGridDecTrCode: ToEveTr
      WithinGridGrassCode: ToEveTr
      WithinGridUnmanBSoilCode: ToEveTr
    - WithinGridPavedCode: ToDecTr
      WithinGridBldgsCode: ToDecTr
      WithinGridEveTrCode: ToDecTr
      WithinGridDecTrCode: ToDecTr
      WithinGridGrassCode: ToDecTr
      WithinGridUnmanBSoilCode: ToDecTr
    - WithinGridPavedCode: ToGrass
      WithinGridBldgsCode: ToGrass
      WithinGridEveTrCode: ToGrass
      WithinGridDecTrCode: ToGrass
      WithinGridGrassCode: ToGrass
      WithinGridUnmanBSoilCode: ToGrass
    - WithinGridPavedCode: ToBSoil
      WithinGridBldgsCode: ToBSoil
      WithinGridEveTrCode: ToBSoil
      WithinGridDecTrCode: ToBSoil
      WithinGridGrassCode: ToBSoil
      WithinGridUnmanBSoilCode: ToBSoil
    - WithinGridPavedCode: ToWater
      WithinGridBldgsCode: ToWater
      WithinGridEveTrCode: ToWater
      WithinGridDecTrCode: ToWater
      WithinGridGrassCode: ToWater
      WithinGridUnmanBSoilCode: ToWater
    - WithinGridPavedCode:
        - ToRunoff
        - ToSoilStore
      WithinGridBldgsCode:
        - ToRunoff
        - ToSoilStore
      WithinGridEveTrCode:
        - ToRunoff
        - ToSoilStore
      WithinGridDecTrCode:
        - ToRunoff
        - ToSoilStore
      WithinGridGrassCode:
        - ToRunoff
        - ToSoilStore
      WithinGridUnmanBSoilCode:
        - ToRunoff
        - ToSoilStore
  data dimensions:
    - (8, 6)
    - remarks:
        "8: { `suews:Paved`, `suews:Bldgs`, `suews:EveTr`, `suews:DecTr`, `suews:Grass`,\
        \ `suews:BSoil`, `suews:Water`, one extra land cover type (currently NOT used)}\n\
        \n        6: { `suews:Paved`, `suews:Bldgs`, `suews:EveTr`, `suews:DecTr`, `suews:Grass`,\
        \ `suews:BSoil`}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
waterusemethod:
  type:
    input: state
  description: Defines how external water use is calculated.
  suews-related variables: :option:`WaterUseMethod <suews:WaterUseMethod>`
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
wetthresh_surf:
  type:
    input: state
  description:
    Depth of water which determines whether evaporation occurs from a partially
    wet or completely wet surface [mm].
  suews-related variables: :option:`WetThreshold <suews:WetThreshold>`
  path_loading:
    Code_Paved: WetThreshold
    Code_Bldgs: WetThreshold
    Code_EveTr: WetThreshold
    Code_DecTr: WetThreshold
    Code_Grass: WetThreshold
    Code_Bsoil: WetThreshold
    Code_Water: WetThreshold
  data dimensions:
    - (7,)
    - remarks:
        "7: { `suews:Paved`, `suews:Bldgs`, `suews:EveTr`, `suews:DecTr`, `suews:Grass`,
        `suews:BSoil`, `suews:Water`}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
wuprofa_24hr:
  type:
    input: state
  description: Hourly profile values used in automatic irrigation.
  suews-related variables:
    :option:`WaterUseProfAutoWD <suews:WaterUseProfAutoWD>`,
    :option:`WaterUseProfAutoWE <suews:WaterUseProfAutoWE>`
  path_loading:
    WaterUseProfAutoWD: ":"
    WaterUseProfAutoWE: ":"
  data dimensions:
    - (24, 2)
    - remarks: "24: hours of a day\n\n        2: {Weekday, Weekend}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
wuprofm_24hr:
  type:
    input: state
  description: Hourly profile values used in manual irrigation.
  suews-related variables:
    :option:`WaterUseProfManuWD <suews:WaterUseProfManuWD>`,
    :option:`WaterUseProfManuWE <suews:WaterUseProfManuWE>`
  path_loading:
    WaterUseProfManuWD: ":"
    WaterUseProfManuWE: ":"
  data dimensions:
    - (24, 2)
    - remarks: "24: hours of a day\n\n        2: {Weekday, Weekend}"
  physics scheme:
    scheme to add:
      - code 1
      - code 2
z:
  type:
    input: state
  description:
    Measurement height [m] for all atmospheric forcing variables set in
    `SSss_YYYY_data_tt.txt`.
  suews-related variables: :option:`z <suews:z>`
  path_loading: z
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
z0m_in:
  type:
    input: state
  description: Roughness length for momentum [m]
  suews-related variables: :option:`z0 <suews:z0>`
  path_loading: z0
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
zdm_in:
  type:
    input: state
  description: Zero-plane displacement [m]
  suews-related variables: :option:`zd <suews:zd>`
  path_loading: zd
  data dimensions:
    - "0"
    - remarks: Scalar
  physics scheme:
    scheme to add:
      - code 1
      - code 2
iy:
  type:
    input: forcing
  description: Year [YYYY]
id:
  type:
    input: forcing
  description: Day of year [DOY]
it:
  type:
    input: forcing
  description: Hour [H]
imin:
  type:
    input: forcing
  description: Minute [M]
qn:
  type:
    input: forcing
  description:
    Net all-wave radiation [W |m^-2|] (Required if `NetRadiationMethod`
    = 0.)
qh:
  type:
    input: forcing
  description: Sensible heat flux [W |m^-2|]
qe:
  type:
    input: forcing
  description: Latent heat flux [W |m^-2|]
qs:
  type:
    input: forcing
  description: Storage heat flux [W |m^-2|]
qf:
  type:
    input: forcing
  description: Anthropogenic heat flux [W |m^-2|]
U:
  type:
    input: forcing
  description: Wind speed [m s-1] (measurement height (`z`) is needed in `SUEWS_SiteSelect.txt`)
RH:
  type:
    input: forcing
  description: Relative Humidity [%] (measurement height (`z`) is needed in `SUEWS_SiteSelect.txt`)
Tair:
  type:
    input: forcing
  description: "Air temperature [\xB0C] (measurement height (`z`) is needed in `SUEWS_SiteSelect.txt`)"
pres:
  type:
    input: forcing
  description: Barometric pressure [kPa] (measurement height (`z`) is needed in `SUEWS_SiteSelect.txt`)
rain:
  type:
    input: forcing
  description: Rainfall [mm] (measurement height (`z`) is needed in `SUEWS_SiteSelect.txt`)
kdown:
  type:
    input: forcing
  description: Incoming shortwave radiation [W |m^-2|] Must be > 0 W |m^-2|.
snow:
  type:
    input: forcing
  description: "Snow cover fraction (0 \u2013 1) [-] (Required if `SnowUse` = 1)"
ldown:
  type:
    input: forcing
  description: Incoming longwave radiation [W |m^-2|]
fcld:
  type:
    input: forcing
  description: Cloud fraction [tenths]
Wuh:
  type:
    input: forcing
  description: External water use [|m^3|]
xsmd:
  type:
    input: forcing
  description: Observed soil moisture [|m^3| |m^-3|] or [kg |kg^-1|]
lai:
  type:
    input: forcing
  description: Observed leaf area index [|m^-2| |m^-2|]
kdiff:
  type:
    input: forcing
  description: Diffuse radiation [W |m^-2|] |Recmd| if `SOLWEIGUse` = 1
kdir:
  type:
    input: forcing
  description: Direct radiation [W |m^-2|] |Recmd| if `SOLWEIGUse` = 1
wdir:
  type:
    input: forcing
  description: "Wind direction [\xB0] |NotAvail|"
isec:
  type:
    input: forcing
  description: Second [S]
