name: Build and Publish Python wheels to PyPI and TestPyPI

# Workflow triggers and deployment strategy:
#
# 1. VALIDATION ONLY (no deployment):
#    - Pull requests: Build and test all Python versions
#    - Push to master: Build and test all Python versions
#    - Manual workflow_dispatch: Build and test all Python versions
#
# 2. DEVELOPMENT RELEASES (TestPyPI only):
#    - Nightly cron (2 AM UTC): Creates YYYY.M.D.dev tag → TestPyPI
#    - Any tag containing 'dev': Deploy to TestPyPI
#    Installation: 
#      Latest dev: pip install -i https://test.pypi.org/simple/ supy
#      Specific version: pip install -i https://test.pypi.org/simple/ supy==YYYY.M.D.dev
#
# 3. PRODUCTION RELEASES (PyPI only):
#    - Tags without 'dev': Deploy to PyPI
#    Installation: pip install supy
#
# Build matrix: Always builds all Python versions (3.9-3.13) on all platforms

on:
  push:
    branches: [master]
    tags:
      - '*'  # Trigger on any tag push
    paths: # Push events containing matching files
      - "src/suews/**"
      - "src/supy/**"
      - "src/supy_driver/**"
      - ".github/workflows/build-publish_to_pypi.yml"
      - "test/**"
      - "pyproject.toml"
      - "meson.build"
      - "Makefile"

  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    paths: # PR events containing matching files
      - "src/suews/**"
      - "src/supy/**"
      - "src/supy_driver/**"
      - ".github/workflows/build-publish_to_pypi.yml"
      - "test/**"
      - "pyproject.toml"
      - "meson.build"
      - "Makefile"

  schedule:
    # Run nightly builds at 2 AM UTC
    - cron: '0 2 * * *'

  workflow_dispatch:

# Cancel in-progress runs when new commits are pushed to the same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Determine if we should run limited or full matrix
  determine_matrix:
    name: Determine build matrix
    runs-on: ubuntu-latest
    outputs:
      buildplat: ${{ steps.set-matrix.outputs.buildplat }}
      python: ${{ steps.set-matrix.outputs.python }}
    steps:
      - name: Set matrix based on draft status
        id: set-matrix
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]] && [[ "${{ github.event.pull_request.draft }}" == "true" ]]; then
            echo "Running limited matrix for draft PR"
            echo 'buildplat=[["ubuntu-latest", "manylinux", "x86_64"]]' >> $GITHUB_OUTPUT
            echo 'python=["cp39", "cp313"]' >> $GITHUB_OUTPUT
          else
            echo "Running full matrix"
            echo 'buildplat=[["ubuntu-latest", "manylinux", "x86_64"], ["macos-13", "macosx", "x86_64"], ["macos-latest", "macosx", "arm64"], ["windows-2025", "win", "AMD64"]]' >> $GITHUB_OUTPUT
            echo 'python=["cp39", "cp310", "cp311", "cp312", "cp313"]' >> $GITHUB_OUTPUT
          fi

  build_wheels:
    name: Build wheel for ${{ matrix.python }}-${{ matrix.buildplat[1] }} ${{ matrix.buildplat[2] }}
    runs-on: ${{ matrix.buildplat[0] }}
    needs: determine_matrix
    strategy:
      matrix:
        buildplat: ${{ fromJson(needs.determine_matrix.outputs.buildplat) }}
        python: ${{ fromJson(needs.determine_matrix.outputs.python) }}

      fail-fast: false
    env:
      IS_32_BIT: ${{ matrix.buildplat[2] == 'x86' }}
      WHEEL_NAME: ${{ matrix.python }}-${{ matrix.buildplat[1] }}-${{ matrix.buildplat[2] }}
      CIBW_BUILD: ${{ matrix.python }}-${{ matrix.buildplat[1] }}*
      CIBW_ARCHS: ${{ matrix.buildplat[2] }}
      CIBW_ENVIRONMENT_PASS_LINUX: RUNNER_OS
      CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
      CIBW_MANYLINUX_AARCH64_IMAGE: manylinux_2_28
      CIBW_BEFORE_ALL_MACOS: >
        brew install gfortran &&
        brew unlink gfortran &&
        brew link gfortran
      CIBW_BEFORE_ALL_WINDOWS: >
        C:\msys64\usr\bin\bash.exe -lc "pacman -Syu --noconfirm" &&
        C:\msys64\usr\bin\bash.exe -lc "pacman -S --needed --noconfirm mingw-w64-ucrt-x86_64-gcc mingw-w64-ucrt-x86_64-gcc-fortran mingw-w64-ucrt-x86_64-binutils mingw-w64-ucrt-x86_64-make mingw-w64-ucrt-x86_64-openblas"
      CIBW_ENVIRONMENT_WINDOWS: >
        PATH="C:\\msys64\\ucrt64\\bin;$PATH"
        CC=gcc
        CXX=g++
        FC=gfortran
        CFLAGS="-D__USE_MINGW_ANSI_STDIO=1 -mlong-double-64"
        CXXFLAGS="-D__USE_MINGW_ANSI_STDIO=1 -mlong-double-64"
        FCFLAGS="-fno-optimize-sibling-calls"
        LDFLAGS="-lucrt -static-libgcc -static-libgfortran -LC:/msys64/ucrt64/lib -lsetjmp_compat"
      CIBW_BEFORE_BUILD_WINDOWS: >
        echo Creating setjmp compatibility library... &&
        echo int _setjmpex(void* buf) { extern int __intrinsic_setjmpex(void*); return __intrinsic_setjmpex(buf); } > setjmp_compat.c &&
        C:\msys64\ucrt64\bin\gcc.exe -c setjmp_compat.c -o setjmp_compat.o &&
        C:\msys64\ucrt64\bin\ar.exe rcs libsetjmp_compat.a setjmp_compat.o &&
        echo Library created, checking contents: &&
        C:\msys64\ucrt64\bin\nm.exe libsetjmp_compat.a &&
        echo Copying to standard locations: &&
        copy libsetjmp_compat.a C:\msys64\ucrt64\lib\ &&
        copy libsetjmp_compat.a C:\msys64\ucrt64\x86_64-w64-mingw32\lib\ &&
        echo Verifying library locations: &&
        dir C:\msys64\ucrt64\lib\libsetjmp_compat.a &&
        dir C:\msys64\ucrt64\x86_64-w64-mingw32\lib\libsetjmp_compat.a &&
        where python &&
        where gcc &&
        gcc --version &&
        pip install delvewheel
      CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: "delvewheel repair -w {dest_dir} {wheel}"
      CIBW_TEST_REQUIRES: pytest
      CIBW_TEST_COMMAND: "python -m pytest {project}/test -v --tb=short"
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.buildplat[0] == 'macos-13' && '13.0' || '14.0' }}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
            python-version: 3.12

      - name: Build wheels
        uses: pypa/cibuildwheel@v3.0.0

      - name: upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.WHEEL_NAME }}
          path: ./wheelhouse/*.whl

  # Wait specifically for cp313-manylinux build to complete
  wait_for_cp313_linux:
    name: Wait for cp313-manylinux
    runs-on: ubuntu-latest
    needs: build_wheels
    if: always()
    outputs:
      artifact_ready: ${{ steps.check.outputs.ready }}
    steps:
      - name: Wait for cp313-manylinux artifact
        id: check
        run: |
          # Poll for the specific artifact we need (max 20 minutes)
          for i in {1..120}; do
            echo "Checking for cp313-manylinux-x86_64 artifact (attempt $i/120)..."
            
            # Check if artifact exists
            if gh api repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts \
               --jq '.artifacts[] | select(.name=="cp313-manylinux-x86_64")' 2>/dev/null | grep -q "cp313"; then
              echo "✓ Found cp313-manylinux-x86_64 artifact!"
              echo "ready=true" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            # Wait 10 seconds before next check
            sleep 10
          done
          
          echo "❌ Timeout waiting for cp313-manylinux-x86_64 artifact"
          echo "ready=false" >> $GITHUB_OUTPUT
          exit 1
        env:
          GH_TOKEN: ${{ github.token }}

  export_schema:
    name: Export JSON Schema
    runs-on: ubuntu-latest
    needs: [determine_matrix, wait_for_cp313_linux]
    # Only run if cp313-manylinux artifact is ready
    if: |
      always() &&
      needs.wait_for_cp313_linux.outputs.artifact_ready == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need tags for version detection
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      
      - name: Download cp313-manylinux wheel
        uses: actions/download-artifact@v4
        with:
          name: cp313-manylinux-x86_64
          path: dist
      
      - name: Install SUEWS from wheel
        run: |
          python -m pip install --upgrade pip
          python -m pip install dist/*.whl
          echo "✓ SUEWS installed from wheel"
      
      - name: Get schema version
        id: schema_version
        run: |
          SCHEMA_VERSION=$(python -c "from supy.data_model.schema.version import CURRENT_SCHEMA_VERSION; print(CURRENT_SCHEMA_VERSION)")
          echo "SCHEMA_VERSION=$SCHEMA_VERSION" >> $GITHUB_ENV
          echo "schema_version=$SCHEMA_VERSION" >> $GITHUB_OUTPUT
          echo "✓ Detected schema version: $SCHEMA_VERSION"
      
      - name: Export schema
        run: |
          # Determine build type and export accordingly
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "📝 Exporting PR preview schema version ${{ env.SCHEMA_VERSION }}"
            # For PRs, export to preview subdirectory with warning banner
            python -m supy.data_model.schema.exporter \
              --output-dir "public/preview/pr-${{ github.event.pull_request.number }}/schema/suews-config" \
              --preview \
              --pr-number "${{ github.event.pull_request.number }}"
            echo "SCHEMA_PATH=preview/pr-${{ github.event.pull_request.number }}/schema/suews-config" >> $GITHUB_ENV
          else
            echo "📝 Exporting schema version ${{ env.SCHEMA_VERSION }}"
            # For master/tags/schedule, export to standard location
            python -m supy.data_model.schema.exporter \
              --output-dir "public/schema/suews-config"
            echo "SCHEMA_PATH=schema/suews-config" >> $GITHUB_ENV
          fi
          
          echo "✓ Schema export complete"
      
      - name: List generated files
        run: |
          echo "Generated schema files:"
          find public -type f -name "*.json" -o -name "*.html" | head -20
          echo ""
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "Preview URL: https://umep-dev.github.io/SUEWS/preview/pr-${{ github.event.pull_request.number }}/schema/suews-config/"
          else
            echo "Schema URL: https://umep-dev.github.io/SUEWS/schema/suews-config/"
          fi
      
      - name: Upload schema artifact
        uses: actions/upload-artifact@v4
        with:
          name: schema-${{ env.SCHEMA_VERSION }}
          path: public/
          retention-days: 30

  create_nightly_tag:
    name: Create nightly tag after successful builds
    runs-on: ubuntu-latest
    needs: [determine_matrix, build_wheels]
    if: github.event_name == 'schedule' && success()
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create and push nightly tag
        run: |
          set -e

          # Get the current date in YYYY.M.D format (without leading zeros as requested)
          YEAR=$(date -u +%Y)
          MONTH=$(date -u +%-m)  # Without leading zero
          DAY=$(date -u +%-d)    # Without leading zero

          # Create a dev tag for the nightly build
          DEV_TAG="${YEAR}.${MONTH}.${DAY}.dev"
          echo "Creating dev tag: ${DEV_TAG}"

          # Configure git
          git config user.name github-actions
          git config user.email github-actions@github.com

          # Check if tag already exists
          if git ls-remote --tags origin | grep -q "refs/tags/${DEV_TAG}"; then
            echo "Tag ${DEV_TAG} already exists on remote, skipping tag creation"
          else
            # Create and push the tag
            git tag -a "${DEV_TAG}" -m "Nightly build ${YEAR}-${MONTH}-${DAY}"
            git push origin "${DEV_TAG}"
            echo "Successfully created and pushed tag ${DEV_TAG}"
          fi

  deploy_testpypi:
    name: Publish to TestPyPI
    runs-on: ubuntu-latest
    needs:
      - determine_matrix
      - build_wheels
      - create_nightly_tag  # Will be skipped for non-nightly builds
    # Only run TestPyPI deployment for: scheduled (nightly) or tagged releases WITH 'dev'
    # Skip for PRs, regular pushes to master, and production releases
    if: |
      always() &&
      needs.build_wheels.result == 'success' &&
      (needs.create_nightly_tag.result == 'success' || needs.create_nightly_tag.result == 'skipped') &&
      (
        github.event_name == 'schedule' ||
        (startsWith(github.ref, 'refs/tags/') && contains(github.ref, 'dev'))
      )
    
    # Set up permissions for OIDC authentication
    permissions:
      id-token: write  # Required for Trusted Publishing

    steps:
      - name: Download all wheels for TestPyPI
        uses: actions/download-artifact@v4
        with:
          path: dist/
          merge-multiple: true

      - name: Publish wheels to Test PyPI
        uses: pypa/gh-action-pypi-publish@release/v1.8
        with:
          packages-dir: dist/
          verbose: true
          skip-existing: true
          repository-url: https://test.pypi.org/legacy/

  deploy_pypi:
    name: Publish all wheels to PyPI
    runs-on: ubuntu-latest
    needs:
      - determine_matrix
      - build_wheels
      - create_nightly_tag  # Will be skipped for non-nightly builds
    # Only run for tagged releases WITHOUT 'dev' in the tag name
    if: |
      always() &&
      startsWith(github.ref, 'refs/tags') &&
      !contains(github.ref, 'dev') &&
      needs.build_wheels.result == 'success' &&
      (needs.create_nightly_tag.result == 'success' || needs.create_nightly_tag.result == 'skipped')
    
    # Set up permissions for OIDC authentication
    permissions:
      id-token: write  # Required for Trusted Publishing

    steps:
      - name: Download all the built wheels
        uses: actions/download-artifact@v4
        with:
          path: dist/
          merge-multiple: true

      - name: Publish all wheels to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1.8
        with:
          packages-dir: dist/
          verbose: true
          skip-existing: true

  deploy_schema:
    name: Deploy Schema to GitHub Pages
    runs-on: ubuntu-latest
    needs: [export_schema]
    # Deploy schema for:
    # - PRs (preview)
    # - Push to master
    # - Tags (releases)
    # - Scheduled runs (nightly)
    if: |
      always() &&
      needs.export_schema.result == 'success' &&
      (
        github.event_name == 'pull_request' ||
        (github.event_name == 'push' && github.ref == 'refs/heads/master') ||
        startsWith(github.ref, 'refs/tags/') ||
        github.event_name == 'schedule'
      )
    
    permissions:
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Download schema artifact
        uses: actions/download-artifact@v4
        with:
          pattern: schema-*
          path: public
          merge-multiple: true
      
      - name: Setup Pages
        uses: actions/configure-pages@v5
      
      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: public
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          preview: ${{ github.event_name == 'pull_request' }}
