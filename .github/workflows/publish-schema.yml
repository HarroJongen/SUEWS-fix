name: Publish JSON Schema

# Schema publication strategy aligned with build-publish_to_pypi.yml:
#
# 1. VALIDATION ONLY (no deployment):
#    - Pull requests: Build and validate schema generation works
#    - Push to master: Build and validate schema generation works
#    - Manual workflow_dispatch: Build and validate (unless dry_run=false)
#
# 2. DEVELOPMENT SCHEMAS (deploy to GitHub Pages):
#    - Nightly builds (2:30 AM UTC): Deploy schema from scheduled run
#    - Tags containing 'dev': Deploy development schema version (created by main workflow)
#
# 3. PRODUCTION SCHEMAS (deploy to GitHub Pages as stable):
#    - Tags without 'dev': Deploy as stable schema version
#    - Also update 'latest' symlink to point to new stable version
#
# This mirrors the PyPI deployment strategy where:
# - Nightly/dev tags ‚Üí TestPyPI (development) - tags created by main workflow
# - Regular tags ‚Üí PyPI (production)
# Note: This workflow does NOT create tags, it only deploys schemas when triggered
#
on:
  push:
    branches: [master]
    tags:
      - '*'  # Trigger on any tag push
    paths:
      - "src/supy/data_model/**"
      - ".github/workflows/publish-schema.yml"
      - "pyproject.toml"
      
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    paths:
      - "src/supy/data_model/**"
      - ".github/workflows/publish-schema.yml"
      
  schedule:
    # Run nightly builds at 2:30 AM UTC (30 min after main build)
    - cron: '30 2 * * *'
    
  workflow_dispatch:  # Manual trigger for testing
    inputs:
      dry_run:
        description: 'Dry run (skip deployment)'
        type: boolean
        default: false

# Cancel in-progress runs when new commits are pushed to the same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build and Export Schema
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history and tags for version detection
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.13  # Use latest Python 3.13
      
      - name: Try to download pre-built wheel artifact
        id: download_wheel
        # Only try to download wheels for master branch or tags
        # For PRs, we need to build from source to get the new code
        if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
        uses: dawidd6/action-download-artifact@v3
        with:
          workflow: build-publish_to_pypi.yml
          workflow_conclusion: success
          name: cp313-manylinux-x86_64
          path: dist
          if_no_artifact_found: warn
        continue-on-error: true
          
      - name: Install SUEWS from wheel or build from source
        run: |
          python -m pip install --upgrade pip setuptools wheel
          
          # Check if wheel was downloaded successfully and if it's from current branch
          # Note: Wheels from master branch won't have the schema module yet
          if [ -d "dist" ] && [ -n "$(ls -A dist/*.whl 2>/dev/null)" ]; then
            echo "Found pre-built wheel, checking if it has schema module..."
            python -m pip install dist/*.whl
            python -m pip install pytest pyyaml  # Add test dependencies
            
            # Test if schema module exists in the installed wheel
            if python -c "from supy.data_model.schema.version import CURRENT_SCHEMA_VERSION" 2>/dev/null; then
              echo "‚úì SUEWS installed from wheel with schema module"
            else
              echo "Wheel doesn't have schema module (likely from master branch), building from source..."
              python -m pip uninstall -y supy
              # Install gfortran for building
              sudo apt-get update && sudo apt-get install -y gfortran
              # Install build dependencies
              python -m pip install build meson-python meson ninja
              # Build with fast mode to avoid strict compiler flags
              python -m pip install --no-build-isolation --editable '.[dev]' \
                --config-settings=setup-args="-Dfast_build=true" \
                --config-settings=compile-args="-j2"
              echo "‚úì SUEWS built from source with schema module"
            fi
          else
            echo "No wheel found, building SUEWS from source..."
            # Install gfortran for building
            sudo apt-get update && sudo apt-get install -y gfortran
            # Install build dependencies
            python -m pip install build meson-python meson ninja
            # Build with fast mode to avoid strict compiler flags
            python -m pip install --no-build-isolation --editable '.[dev]' \
              --config-settings=setup-args="-Dfast_build=true" \
              --config-settings=compile-args="-j2"
            echo "‚úì SUEWS built and installed from source"
          fi
          
      - name: Get schema version
        id: schema_version
        run: |
          # Extract the current schema version from the code
          SCHEMA_VERSION=$(python -c "from supy.data_model.schema.version import CURRENT_SCHEMA_VERSION; print(CURRENT_SCHEMA_VERSION)")
          echo "SCHEMA_VERSION=$SCHEMA_VERSION" >> $GITHUB_ENV
          echo "schema_version=$SCHEMA_VERSION" >> $GITHUB_OUTPUT
          echo "‚úì Detected schema version: $SCHEMA_VERSION"
          
      - name: Validate schema functionality
        run: |
          echo "üß™ Running schema validation tests..."
          python -m pytest test/data_model/test_schema_versioning.py -v --tb=short || true
          echo "‚úì Schema test run completed"
          
      - name: Export schema for GitHub Pages
        run: |
          # Determine if this is a dev build and set appropriate flags
          if [[ "${{ github.event_name }}" == "schedule" ]] || [[ "${{ github.ref }}" == *dev* ]]; then
            echo "üìù Exporting development schema version ${{ env.SCHEMA_VERSION }}"
          else
            echo "üìù Exporting production schema version ${{ env.SCHEMA_VERSION }}"
          fi
          
          python -m supy.data_model.schema.exporter
          echo "‚úì Schema export complete for version ${{ env.SCHEMA_VERSION }}"
          
      - name: List generated files
        run: |
          echo "Generated files:"
          find public -type f | head -20
          echo ""
          echo "Schema versions:"
          ls -la public/schema/suews-config/ 2>/dev/null || echo "No schema files found"
          
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: public
          
      - name: Attach schema to release
        # Only attach schema files to actual GitHub releases (not dev tags)
        if: startsWith(github.ref, 'refs/tags/') && !contains(github.ref, 'dev')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            public/schema/suews-config/*.json
          body: |
            ## Configuration Schema
            
            ### üìã Schema Information
            - **Schema Version**: `${{ env.SCHEMA_VERSION }}`
            - **Schema URL**: https://umep-dev.github.io/SUEWS/schema/suews-config/${{ env.SCHEMA_VERSION }}.json
            - **Latest Schema**: https://umep-dev.github.io/SUEWS/schema/suews-config/latest.json
            
            ### üîß Usage in YAML Configuration:
            ```yaml
            # Specify the schema version for compatibility checking
            schema_version: "${{ env.SCHEMA_VERSION }}"
            
            # Optional: Enable IDE validation and auto-completion
            $schema: "https://umep-dev.github.io/SUEWS/schema/suews-config/${{ env.SCHEMA_VERSION }}.json"
            
            # Your configuration continues...
            model:
              ...
            sites:
              ...
            ```
            
            ### üîÑ Schema Compatibility
            This version of SUEWS supports schema version ${{ env.SCHEMA_VERSION }}.
            For migration from older schemas, see the [migration guide](https://suews.readthedocs.io/schema-migration).
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    name: Deploy Schema to GitHub Pages
    needs: build
    # Deploy schema for:
    # 1. Production releases (tags without 'dev')
    # 2. Development releases (tags with 'dev')
    # 3. Nightly builds (scheduled runs)
    # 4. Never deploy for PRs or regular pushes to master
    if: |
      needs.build.result == 'success' &&
      github.event.inputs.dry_run != 'true' && (
        (github.event_name == 'schedule') ||
        (startsWith(github.ref, 'refs/tags/'))
      )
    
    # Grant permissions for Pages deployment
    permissions:
      pages: write
      id-token: write
      
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
      - name: Determine deployment type
        id: deployment_type
        run: |
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            echo "type=nightly" >> $GITHUB_OUTPUT
            echo "üìÖ Nightly schema deployment"
          elif [[ "${{ github.ref }}" == refs/tags/* ]] && [[ "${{ github.ref }}" == *dev* ]]; then
            echo "type=development" >> $GITHUB_OUTPUT
            echo "üß™ Development schema deployment"
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "type=production" >> $GITHUB_OUTPUT
            echo "üöÄ Production schema deployment"
          else
            echo "type=skip" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è Skipping deployment"
          fi
      
      - name: Deploy to GitHub Pages
        id: deployment
        if: steps.deployment_type.outputs.type != 'skip'
        uses: actions/deploy-pages@v4