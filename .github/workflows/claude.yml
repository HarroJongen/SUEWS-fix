# Claude General Workflow
#
# This workflow handles general Claude requests when authorized users mention @claude.
# For dedicated code reviews, use @claude-review instead.
#
# Note: Set CLAUDE_AUTHORIZED_USERS secret in repository settings
# Format: comma-separated list of GitHub usernames (e.g., "sunt05,user2,user3")
#
name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
    steps:
      - name: Check user authorization
        id: auth-check
        env:
          AUTHORIZED_USERS: ${{ secrets.CLAUDE_AUTHORIZED_USERS }}
          COMMENT_USER: ${{ github.event.comment.user.login || github.event.issue.user.login || github.event.review.user.login }}
        run: |
          if [ -z "$AUTHORIZED_USERS" ]; then
            echo "❌ CLAUDE_AUTHORIZED_USERS secret not configured"
            echo "authorized=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check if user is in the authorized list
          if echo "$AUTHORIZED_USERS" | grep -q "\b$COMMENT_USER\b"; then
            echo "✅ User $COMMENT_USER is authorized"
            echo "authorized=true" >> $GITHUB_OUTPUT
          else
            echo "❌ User $COMMENT_USER is not authorized"
            echo "authorized=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Comment if unauthorized
        if: steps.auth-check.outputs.authorized == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const issueNumber = context.issue?.number || context.payload.pull_request?.number || context.payload.issue?.number;
            if (issueNumber) {
              const comment = {
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body: '❌ Sorry, you are not authorized to trigger Claude. Please contact the repository maintainers.'
              };
              await github.rest.issues.createComment(comment);
            }
            core.setFailed('Unauthorized user');
            
      - name: Checkout repository
        if: steps.auth-check.outputs.authorized == 'true'
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code
        if: steps.auth-check.outputs.authorized == 'true'
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          
          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"
          
          # Optional: Customize the trigger phrase (default: @claude)
          # trigger_phrase: "/claude"
          
          # Optional: Trigger when specific user is assigned to an issue
          # assignee_trigger: "claude-bot"
          
          # Optional: Allow Claude to run specific commands
          # allowed_tools: "Bash(npm install),Bash(npm run build),Bash(npm run test:*),Bash(npm run lint:*)"
          
          # Optional: Add custom instructions for Claude to customize its behavior for your project
          # custom_instructions: |
          #   Follow our coding standards
          #   Ensure all new code has tests
          #   Use TypeScript for new files
          
          # Optional: Custom environment variables for Claude
          # claude_env: |
          #   NODE_ENV: test

