name: 'Cleanup Old TestPyPI Packages'

on:
  schedule:
    # Run on the 1st of every month at 2:00 AM UTC
    - cron: '0 2 1 * *'
  workflow_dispatch:
    inputs:
      package_name:
        description: 'The name of the package to clean up on TestPyPI'
        required: true
        default: 'supy'
      versions_to_keep:
        description: 'Number of recent versions to keep'
        required: false
        default: '5'
      dry_run:
        description: 'Perform a dry run (show what would be deleted without deleting)'
        required: false
        type: boolean
        default: false

jobs:
  cleanup-package:
    runs-on: ubuntu-latest

    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4

      - name: 'Set up Python'
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: 'Install dependencies'
        run: |
          pip install requests packaging

      - name: 'Cleanup old versions'
        run: |
          cat > cleanup_testpypi.py << 'EOF'
          import os
          import sys
          import requests
          from packaging.version import parse, Version
          from datetime import datetime

          # Configuration
          package_name = "${{ github.event.inputs.package_name || 'supy' }}"
          versions_to_keep = int("${{ github.event.inputs.versions_to_keep || '5' }}")
          dry_run = "${{ github.event.inputs.dry_run || 'false' }}" == "true"
          
          # Get package info from TestPyPI
          url = f"https://test.pypi.org/pypi/{package_name}/json"
          response = requests.get(url)
          
          if response.status_code != 200:
              print(f"❌ Failed to fetch package info: {response.status_code}")
              sys.exit(1)
          
          data = response.json()
          releases = data.get("releases", {})
          
          # Sort versions by release date (newest first)
          version_info = []
          for version, files in releases.items():
              if files:  # Skip versions with no files
                  upload_time = files[0].get("upload_time", "")
                  version_info.append((version, upload_time))
          
          version_info.sort(key=lambda x: x[1], reverse=True)
          
          print(f"📦 Package: {package_name}")
          print(f"📊 Total versions found: {len(version_info)}")
          print(f"🔒 Versions to keep: {versions_to_keep}")
          print(f"🧪 Dry run: {dry_run}")
          print()
          
          # Determine versions to delete
          versions_to_delete = version_info[versions_to_keep:]
          
          if not versions_to_delete:
              print("✅ No versions to delete. All versions are within the keep limit.")
              sys.exit(0)
          
          print(f"🗑️  Versions to delete ({len(versions_to_delete)}):")
          for version, upload_time in versions_to_delete:
              print(f"  - {version} (uploaded: {upload_time})")
          
          print()
          print(f"💾 Versions to keep ({min(len(version_info), versions_to_keep)}):")
          for version, upload_time in version_info[:versions_to_keep]:
              print(f"  - {version} (uploaded: {upload_time})")
          
          if dry_run:
              print("\n⚠️  DRY RUN: No packages were actually deleted.")
              sys.exit(0)
          
          # Note: Actual deletion would require pypi-cleanup or manual deletion
          # This script only identifies what should be deleted
          print("\n⚠️  Note: Automatic deletion requires 'pypi-cleanup' tool with proper authentication.")
          print("To delete these versions, you can:")
          print("1. Use pypi-cleanup tool with TEST_PYPI_API_TOKEN")
          print("2. Delete manually at https://test.pypi.org/manage/project/supy/releases/")
          
          # Save list for potential use with pypi-cleanup
          with open("versions_to_delete.txt", "w") as f:
              for version, _ in versions_to_delete:
                  f.write(f"{version}\n")
          
          print(f"\n📝 List of versions to delete saved to: versions_to_delete.txt")
          EOF
          
          python cleanup_testpypi.py

      - name: 'Upload deletion list'
        if: ${{ github.event.inputs.dry_run != 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: versions-to-delete
          path: versions_to_delete.txt
          retention-days: 1

      - name: 'Attempt deletion with pypi-cleanup'
        if: ${{ github.event.inputs.dry_run != 'true' && env.TEST_PYPI_API_TOKEN != '' }}
        continue-on-error: true
        run: |
          pip install pypi-cleanup
          
          # Read versions to delete
          while IFS= read -r version; do
            echo "Attempting to delete version: $version"
            pypi-cleanup -p ${{ github.event.inputs.package_name }} \
                         -t https://test.pypi.org/ \
                         --version "$version" \
                         --yes || echo "Failed to delete $version"
          done < versions_to_delete.txt
        env:
          PYPIC_USERNAME: __token__
          PYPIC_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
          TEST_PYPI_API_TOKEN: ${{ secrets.TEST_PYPI_API_TOKEN }}