name: 'Cleanup Old TestPyPI Packages'

on:
  push:
    paths:
      - '.github/workflows/cleanup-testpypi.yml'
  schedule:
    # Run on the 1st of every month at 2:00 AM UTC
    - cron: '0 2 1 * *'
  workflow_dispatch:
    inputs:
      package_name:
        description: 'The name of the package to clean up on TestPyPI'
        required: true
        default: 'supy'
      versions_to_keep:
        description: 'Number of recent versions to keep'
        required: false
        default: '50'
      batch_size:
        description: 'Number of old versions to delete per run'
        required: false
        default: '10'
      target_month:
        description: 'Specific year.month to delete (e.g., 2025.1) or leave empty for auto'
        required: false
        default: ''
      dry_run:
        description: 'Perform a dry run (show what would be deleted without deleting)'
        required: false
        type: boolean
        default: false

jobs:
  cleanup-package:
    runs-on: ubuntu-latest

    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v4

      - name: 'Set up Python'
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: 'Install dependencies'
        run: |
          pip install requests packaging

      - name: 'Cleanup old versions'
        run: |
          cat > cleanup_testpypi.py << 'EOF'
          import os
          import sys
          import requests
          from packaging.version import parse, Version
          from datetime import datetime

          # Configuration
          package_name = "${{ github.event.inputs.package_name || 'supy' }}"
          versions_to_keep = int("${{ github.event.inputs.versions_to_keep || '50' }}")
          batch_size = int("${{ github.event.inputs.batch_size || '10' }}")
          dry_run = "${{ github.event.inputs.dry_run || 'false' }}" == "true"

          # Get package info from TestPyPI
          url = f"https://test.pypi.org/pypi/{package_name}/json"
          response = requests.get(url)

          if response.status_code != 200:
              print(f"❌ Failed to fetch package info: {response.status_code}")
              sys.exit(1)

          data = response.json()
          releases = data.get("releases", {})

          # Sort versions by release date (newest first)
          version_info = []
          for version, files in releases.items():
              if files:  # Skip versions with no files
                  upload_time = files[0].get("upload_time", "")
                  version_info.append((version, upload_time))

          version_info.sort(key=lambda x: x[1], reverse=True)

          print(f"📦 Package: {package_name}")
          print(f"📊 Total versions found: {len(version_info)}")
          print(f"🔒 Versions to keep: {versions_to_keep}")
          print(f"🧪 Dry run: {dry_run}")
          print()

          # Determine versions to delete
          versions_to_delete = version_info[versions_to_keep:]

          if not versions_to_delete:
              print("✅ No versions to delete. All versions are within the keep limit.")
              sys.exit(0)

          print(f"🗑️  Versions to delete ({len(versions_to_delete)}):")
          for version, upload_time in versions_to_delete:
              print(f"  - {version} (uploaded: {upload_time})")

          print()
          print(f"💾 Versions to keep ({min(len(version_info), versions_to_keep)}):")
          for version, upload_time in version_info[:versions_to_keep]:
              print(f"  - {version} (uploaded: {upload_time})")

          if dry_run:
              print("\n⚠️  DRY RUN: No packages were actually deleted.")
              sys.exit(0)

          # Note: Actual deletion would require pypi-cleanup or manual deletion
          # This script only identifies what should be deleted
          print("\n⚠️  Note: Automatic deletion requires 'pypi-cleanup' tool with proper authentication.")
          print("To delete these versions, you can:")
          print("1. Use pypi-cleanup tool with TEST_PYPI_API_TOKEN")
          print("2. Delete manually at https://test.pypi.org/manage/project/supy/releases/")

          # Save list for potential use with pypi-cleanup
          with open("versions_to_delete.txt", "w") as f:
              for version, _ in versions_to_delete:
                  f.write(f"{version}\n")

          print(f"\n📝 List of versions to delete saved to: versions_to_delete.txt")
          EOF

          python cleanup_testpypi.py

      - name: 'Upload deletion list'
        if: ${{ github.event.inputs.dry_run != 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: versions-to-delete
          path: versions_to_delete.txt
          retention-days: 1

      - name: 'Attempt batch deletion with pypi-cleanup'
        if: ${{ github.event.inputs.dry_run != 'true' && env.TEST_PYPI_API_TOKEN != '' }}
        continue-on-error: true
        run: |
          pip install pypi-cleanup
          
          # Create .pypirc configuration file
          cat > ~/.pypirc << EOF
          [distutils]
          index-servers =
              testpypi
          
          [testpypi]
          repository = https://test.pypi.org/legacy/
          username = __token__
          password = ${{ secrets.TEST_PYPI_API_TOKEN }}
          EOF
          
          chmod 600 ~/.pypirc

          # Note: pypi-cleanup doesn't support deleting specific versions
          # It uses regex patterns to match versions to delete
          
          echo "⚠️  pypi-cleanup tool limitations detected:"
          echo "- Cannot delete specific versions, only by regex patterns"
          echo "- The --version flag doesn't exist in pypi-cleanup"
          echo ""
          echo "Running alternative cleanup strategy..."
          echo "Note: To avoid deleting all versions, consider manual deletion in batches"
          echo "Visit: https://test.pypi.org/manage/project/${PACKAGE_NAME}/releases/"
          
          # Use regex to delete old dev versions (keeping recent ones)
          # This will delete dev versions older than what we want to keep
          PACKAGE_NAME="${{ github.event.inputs.package_name || 'supy' }}"
          VERSIONS_TO_KEEP="${{ github.event.inputs.versions_to_keep || '50' }}"
          BATCH_SIZE="${{ github.event.inputs.batch_size || '10' }}"
          
          echo "Attempting to clean old dev versions..."
          
          TARGET_MONTH="${{ github.event.inputs.target_month || '' }}"
          
          if [[ -n "$TARGET_MONTH" ]]; then
            # Specific month targeted
            echo "Targeting specific month: $TARGET_MONTH"
            ESCAPED_MONTH=$(echo "$TARGET_MONTH" | sed 's/\./\\./g')
            PATTERN="${ESCAPED_MONTH}\\..*\\.dev[0-9]+$"
            
            echo "Pattern: $PATTERN"
            
            if [[ "${{ github.event.inputs.dry_run }}" == "true" ]]; then
              echo "🔍 Query mode - checking what would be deleted..."
              pypi-cleanup \
                           -p "$PACKAGE_NAME" \
                           -t https://test.pypi.org/ \
                           -r "$PATTERN" \
                           --query-only
            else
              echo "⚠️  DELETING all $TARGET_MONTH dev versions..."
              pypi-cleanup \
                           -p "$PACKAGE_NAME" \
                           -t https://test.pypi.org/ \
                           -r "$PATTERN" \
                           --do-it \
                           --yes
            fi
          else
            # Auto mode - check multiple old months
            echo "Auto mode - checking older months (2025.1 through 2025.5)"
            
            for MONTH in 1 2 3 4 5; do
              echo ""
              echo "Checking 2025.$MONTH.* dev versions..."
              pypi-cleanup \
                           -p "$PACKAGE_NAME" \
                           -t https://test.pypi.org/ \
                           -r "2025\.$MONTH\..*\.dev[0-9]+$" \
                           --query-only || echo "No matches for 2025.$MONTH.*"
            done
            
            echo ""
            echo "💡 To delete a specific month, run again with target_month parameter"
          fi
        env:
          PYPI_CLEANUP_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
          TEST_PYPI_API_TOKEN: ${{ secrets.TEST_PYPI_API_TOKEN }}