name: Validate SUEWS Configurations

on:
  push:
    paths:
      - 'test/**/*.yml'
      - 'src/supy/data_model/**'
      - 'src/supy/cmd/validate_config.py'
      - 'src/supy/cmd/json_output.py'
      - '.github/workflows/validate-configs.yml'
      - '.github/scripts/validate-configs.py'
  pull_request:
    paths:
      - 'test/**/*.yml'
      - 'src/supy/data_model/**'
      - 'src/supy/cmd/validate_config.py'
      - 'src/supy/cmd/json_output.py'

jobs:
  validate:
    name: Validate Configuration Files
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
      
      - name: Validate configurations with structured JSON output
        id: validate
        run: |
          # Run validation and capture JSON output
          suews-validate validate test/**/*.yml --format json > validation-results.json || true
          
          # Display the results
          echo "üìã Validation Results:"
          cat validation-results.json | python -m json.tool
          
          # Parse and check results
          python -c "
          import json
          import sys
          
          with open('validation-results.json') as f:
              results = json.load(f)
          
          # Extract summary
          summary = results.get('summary', {})
          total = summary.get('total_files', 0)
          valid = summary.get('valid_files', 0)
          
          print(f'\\nüìä Summary: {valid}/{total} files valid')
          
          # Process errors for GitHub annotations
          for file_result in results.get('results', []):
              if not file_result['valid']:
                  filename = file_result['file']
                  for error in file_result.get('errors', []):
                      if isinstance(error, dict):
                          code = error.get('code_name', 'ERROR')
                          msg = error.get('message', 'Unknown error')
                          field = error.get('field', '')
                          if field:
                              print(f'::error file={filename},title={code}::{field}: {msg}')
                          else:
                              print(f'::error file={filename},title={code}::{msg}')
                      else:
                          print(f'::error file={filename}::{error}')
          
          # Set output variables
          print(f'::set-output name=total_files::{total}')
          print(f'::set-output name=valid_files::{valid}')
          print(f'::set-output name=status::{results.get(\"status\")}')
          
          # Exit with error if validation failed
          if results.get('status') != 'success':
              sys.exit(1)
          "
      
      - name: Upload validation results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: validation-results
          path: validation-results.json
      
      - name: Comment PR with results (if applicable)
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('validation-results.json', 'utf8'));
            
            const summary = results.summary || {};
            const total = summary.total_files || 0;
            const valid = summary.valid_files || 0;
            const errors = summary.total_errors || 0;
            
            let comment = '## üîç SUEWS Configuration Validation Results\n\n';
            
            if (results.status === 'success') {
              comment += '‚úÖ **All configurations are valid!**\n\n';
            } else {
              comment += `‚ùå **Validation failed**: ${total - valid} file(s) have errors\n\n`;
            }
            
            comment += `### üìä Summary\n`;
            comment += `- Total files: ${total}\n`;
            comment += `- Valid files: ${valid}\n`;
            comment += `- Invalid files: ${total - valid}\n`;
            comment += `- Total errors: ${errors}\n\n`;
            
            // Add error details if any
            if (results.status !== 'success') {
              comment += '### üî¥ Errors by file\n\n';
              
              for (const fileResult of results.results || []) {
                if (!fileResult.valid) {
                  comment += `<details>\n<summary><b>${fileResult.file}</b> (${fileResult.error_count} errors)</summary>\n\n`;
                  
                  for (const error of fileResult.errors || []) {
                    if (typeof error === 'object') {
                      const code = error.code_name || 'ERROR';
                      const msg = error.message || 'Unknown error';
                      const field = error.field || '';
                      comment += `- **[${code}]** ${field ? field + ': ' : ''}${msg}\n`;
                    } else {
                      comment += `- ${error}\n`;
                    }
                  }
                  
                  comment += '\n</details>\n\n';
                }
              }
            }
            
            comment += `\n---\n`;
            comment += `*Generated at ${results.timestamp || new Date().toISOString()} by SUEWS validator v${results.metadata?.suews_version || 'unknown'}*`;
            
            // Post the comment
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });