name: Schema Management and Protection

# This workflow manages JSON schema generation, validation, and deployment
# It ensures schemas are only auto-generated and prevents manual edits

on:
  # Trigger on data model changes
  push:
    branches: [master]
    paths:
      - 'src/supy/data_model/**'
      - '.github/scripts/generate_schema.py'
      - '.github/workflows/schema-management.yml'

  # Validate on PRs
  pull_request:
    paths:
      - 'schemas/**'  # Check for manual edits
      - 'src/supy/data_model/**'  # Check for model changes
      - '.github/scripts/generate_schema.py'
      - '.github/workflows/schema-management.yml'  # Test workflow changes

  # Manual trigger for forced regeneration
  workflow_dispatch:
    inputs:
      force_regenerate:
        description: 'Force regenerate schemas even if unchanged'
        required: false
        default: false
        type: boolean

  # Weekly validation to ensure integrity
  schedule:
    - cron: '0 3 * * 1'  # Every Monday at 03:00 UTC

permissions:
  contents: write
  pages: write
  id-token: write
  pull-requests: write

jobs:
  # Job 1: Validate schemas (runs on every PR)
  validate_schemas:
    name: Validate Schema Integrity
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout PR
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for manual schema edits
        id: check_manual
        run: |
          # Get changed schema files
          SCHEMA_CHANGES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep '^schemas/' || true)

          if [ -n "$SCHEMA_CHANGES" ]; then
            echo "Schema files changed:"
            echo "$SCHEMA_CHANGES"

            # Check if the change is from a data model update
            MODEL_CHANGES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD | grep '^src/supy/data_model/' || true)

            if [ -z "$MODEL_CHANGES" ]; then
              echo "‚ùå ERROR: Schema files modified without corresponding data model changes!"
              echo "Schemas must be auto-generated from data model changes."
              echo ""
              echo "To update schemas:"
              echo "1. Modify files in src/supy/data_model/"
              echo "2. Update version in src/supy/data_model/schema/version.py"
              echo "3. Let this workflow regenerate schemas automatically"
              exit 1
            else
              echo "‚úì Schema changes detected alongside data model changes"
            fi
          else
            echo "‚úì No schema files modified"
          fi

      - name: Validate JSON structure
        if: always()
        run: |
          # Validate all JSON files in schemas directory
          for file in schemas/**/*.json; do
            if [ -f "$file" ]; then
              python -m json.tool "$file" > /dev/null 2>&1
              if [ $? -ne 0 ]; then
                echo "‚ùå Invalid JSON in $file"
                exit 1
              else
                echo "‚úì Valid JSON: $file"
              fi
            fi
          done

      - name: Check auto-generated headers
        run: |
          # Check that schema files have auto-generated markers
          for file in schemas/suews-config/*.json; do
            if [ -f "$file" ] && [ "$(basename $file)" != "registry.json" ]; then
              if ! grep -q "_generated_by" "$file" 2>/dev/null; then
                echo "‚ö†Ô∏è  Warning: $file missing auto-generated header"
              fi
            fi
          done

  # Job 2: Generate schemas (runs on master push, workflow_dispatch, or PR with workflow changes)
  generate_schemas:
    name: Generate Schemas  
    runs-on: ubuntu-latest
    # Run on push to master, manual trigger, schedule, or when testing workflow changes in PR
    if: |
      github.event_name == 'push' ||
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'schedule' ||
      github.event_name == 'pull_request'

    outputs:
      schema_version: ${{ steps.version.outputs.version }}
      schemas_changed: ${{ steps.check_changes.outputs.changed }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pydantic pyyaml numpy pandas pytz timezonefinder f90nml packaging
          echo "‚úì Installed dependencies"

      - name: Get schema version
        id: version
        run: |
          # Extract version without importing the full module to avoid circular imports
          cat > get_version.py << 'EOF'
          import re
          with open('src/supy/data_model/schema/version.py', 'r') as f:
              content = f.read()
              match = re.search(r'CURRENT_SCHEMA_VERSION = ["\'](.*?)["\']', content)
              if match:
                  print(match.group(1))
              else:
                  print('0.1')  # Fallback version
          EOF
          VERSION=$(python get_version.py)
          rm get_version.py
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üìå Schema version: $VERSION"

      - name: Generate schemas
        run: |
          echo "üîß Generating schemas..."
          python .github/scripts/generate_schema.py
          echo "‚úì Schema generation complete"

      - name: Check for changes
        id: check_changes
        run: |
          if git diff --quiet schemas/; then
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No schema changes detected"
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "‚úì Schema changes detected"
            git diff --stat schemas/
          fi

      - name: Create Pull Request for schema updates
        # Automatically create PR when schemas need updating (not during PR tests)
        if: |
          github.event_name != 'pull_request' && 
          (steps.check_changes.outputs.changed == 'true' || github.event.inputs.force_regenerate == 'true')
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: |
            chore: Update auto-generated schemas

            Schema version: ${{ steps.version.outputs.version }}
            Triggered by: ${{ github.event_name }}
            Workflow run: #${{ github.run_number }}

            AUTO-GENERATED - DO NOT EDIT MANUALLY
          branch: auto-update/schemas-${{ steps.version.outputs.version }}-${{ github.run_number }}
          delete-branch: true
          title: "ü§ñ Auto-update: Schemas v${{ steps.version.outputs.version }}"
          body: |
            ## ü§ñ Automated Schema Update
            
            This PR was automatically generated to update the JSON schemas based on changes to the data model.
            
            ### üìã Details
            - **Schema version**: `${{ steps.version.outputs.version }}`
            - **Triggered by**: ${{ github.event_name }}${{ github.event_name == 'push' && ' (data model changes in master)' || '' }}${{ github.event_name == 'workflow_dispatch' && ' (manual trigger)' || '' }}${{ github.event_name == 'schedule' && ' (weekly validation)' || '' }}
            - **Workflow run**: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            ### üìù Changes
            - Updated `schemas/suews-config/${{ steps.version.outputs.version }}.json`
            - Updated `schemas/suews-config/latest.json`
            - Updated schema registry
            - Regenerated index.html
            
            ### ‚ö†Ô∏è Important
            This is an auto-generated update. The schemas are generated from the Pydantic models in `src/supy/data_model/`.
            
            ### ‚úÖ Auto-merge
            This PR can be safely merged once all checks pass.
          labels: |
            auto-update
            schemas
            documentation
          add-paths: |
            schemas/**

      - name: PR Test Summary
        # Show what would happen during PR tests
        if: github.event_name == 'pull_request'
        run: |
          if [ "${{ steps.check_changes.outputs.changed }}" == "true" ]; then
            echo "üìã **PR Test Mode**: Schema generation successful!"
            echo ""
            echo "If this PR is merged, the following schema changes would be auto-generated:"
            git diff --stat schemas/
            echo ""
            echo "‚úÖ Schema generation test passed. An automatic PR will be created after merge if needed."
          else
            echo "‚úÖ No schema changes needed from this PR"
          fi

      - name: Upload schema artifact
        uses: actions/upload-artifact@v4
        with:
          name: schema-${{ steps.version.outputs.version }}
          path: schemas/
          retention-days: 30

  # Job 3: Deploy to GitHub Pages
  deploy_schemas:
    name: Deploy Schemas to GitHub Pages
    runs-on: ubuntu-latest
    # Deploy whenever master is updated - schemas should already be committed
    if: |
      github.event_name == 'push' &&
      github.ref == 'refs/heads/master'

    permissions:
      contents: read
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: master  # Get latest including just-committed schemas

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Prepare deployment
        run: |
          mkdir -p _site/schemas
          cp -r schemas/* _site/schemas/

          # Copy landing page if it exists, otherwise create redirect
          if [ -f .github/pages/index.html ]; then
            cp .github/pages/index.html _site/index.html
            echo "‚úì Using custom landing page from .github/pages/"
          else
            # Fallback: Create root index.html redirect
            cat > _site/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>SUEWS Schema</title>
              <meta charset="utf-8">
              <meta http-equiv="refresh" content="0; url=schemas/suews-config/">
          </head>
          <body>
              <h1>SUEWS Configuration Schema</h1>
              <p>Redirecting to <a href="schemas/suews-config/">schema documentation</a>...</p>
          </body>
          </html>
          EOF
            echo "‚úì Using fallback redirect page"
          fi

          # Create .nojekyll
          touch _site/.nojekyll

          echo "üì¶ Prepared deployment:"
          find _site -type f -name "*.json" -o -name "*.html" | head -20

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Job 4: PR Preview deployment to separate environment
  preview_schema:
    name: Generate PR Preview  
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    permissions:
      contents: read
      pull-requests: write  # Needed to comment on PR
      pages: write         # Deploy to Pages
      id-token: write      # OIDC for Pages

    # Deploy to a preview environment instead of production
    environment:
      name: github-pages-preview
      url: ${{ steps.deployment.outputs.page_url }}preview/pr-${{ github.event.pull_request.number }}/

    steps:
      - name: Checkout PR
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pydantic pyyaml numpy pandas pytz timezonefinder f90nml packaging

      - name: Generate preview schema
        run: |
          python .github/scripts/generate_schema.py --preview --pr-number ${{ github.event.pull_request.number }}
          echo "üìù Preview schema generated"

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Build site with PR preview
        run: |
          # Create site structure
          mkdir -p _site
          
          # Download current site content to preserve it
          echo "üì• Attempting to download current site..."
          if curl -fsSL https://umep-dev.github.io/SUEWS/index.html -o _site/index.html 2>/dev/null; then
            echo "‚úÖ Downloaded existing index.html"
            
            # Try to preserve main schemas
            if curl -fsSL https://umep-dev.github.io/SUEWS/schemas/suews-config/latest.json -o /tmp/main-schema.json 2>/dev/null; then
              mkdir -p _site/schemas/suews-config
              cp /tmp/main-schema.json _site/schemas/suews-config/latest.json
              echo "‚úÖ Preserved main schemas"
            fi
            
            # Try to preserve recent PR previews (last 10 PRs)
            for pr in $(seq $(({{ github.event.pull_request.number }} - 10)) $(({{ github.event.pull_request.number }} - 1))); do
              if [ $pr -gt 0 ]; then
                if curl -fsSL https://umep-dev.github.io/SUEWS/preview/pr-$pr/schema/suews-config/latest.json \
                     -o /tmp/pr-$pr.json 2>/dev/null; then
                  mkdir -p _site/preview/pr-$pr/schema/suews-config
                  cp /tmp/pr-$pr.json _site/preview/pr-$pr/schema/suews-config/latest.json
                  echo "‚úÖ Preserved preview for PR #$pr"
                fi
              fi
            done
          else
            echo "‚ö†Ô∏è No existing site found, creating new structure"
            # Create a simple index
            cat > _site/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>SUEWS Schema</title>
              <meta charset="utf-8">
          </head>
          <body>
              <h1>SUEWS Schema Documentation</h1>
              <ul>
                <li><a href="schemas/suews-config/">Current Schema</a></li>
                <li><a href="preview/">PR Previews</a></li>
              </ul>
          </body>
          </html>
          EOF
          fi
          
          # Add this PR's preview
          echo "üì¶ Adding PR #${{ github.event.pull_request.number }} preview..."
          mkdir -p _site/preview/pr-${{ github.event.pull_request.number }}/schema
          cp -r schemas/* _site/preview/pr-${{ github.event.pull_request.number }}/schema/
          
          # Create .nojekyll
          touch _site/.nojekyll
          
          echo "‚úÖ Site prepared with PR preview"
          find _site -type f -name "*.json" -o -name "*.html" | head -10

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        continue-on-error: true  # Don't fail the job if deployment fails

      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.issue.number;
            const comment = `üîç **Schema Validation Complete**

            The schema generation has been tested and validated successfully for this PR.

            - ‚úÖ Schema generation: Success
            - ‚úÖ Schema validation: Passed
            - üì¶ Artifact uploaded: schema-preview-pr-${prNumber}

            üåê **Preview URL**: https://umep-dev.github.io/SUEWS/preview/pr-${prNumber}/schema/suews-config/
            ‚è±Ô∏è The preview will be available after deployment completes (1-2 minutes).
            
            ‚ÑπÔ∏è **Note**: This deploys to a separate preview environment. If the deployment fails,
            it may be because the environment needs to be created in repository settings.

            ‚ö†Ô∏è **Important**: Schemas are auto-generated. Manual edits to schema files will be rejected.`;

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: comment
            });

  # Job 5: Clean up PR previews after merge
  cleanup_preview:
    name: Clean Up PR Preview
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true

    permissions:
      contents: write

    steps:
      - name: Checkout gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Remove PR preview
        run: |
          PR_NUM="${{ github.event.pull_request.number }}"
          if [ -d "preview/pr-${PR_NUM}" ]; then
            rm -rf "preview/pr-${PR_NUM}"
            echo "‚úì Removed preview for PR #${PR_NUM}"
            
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add .
            git commit -m "Clean up preview for merged PR #${PR_NUM}"
            git push
          else
            echo "No preview found for PR #${PR_NUM}"
          fi