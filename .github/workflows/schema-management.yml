name: Schema Management

# HOW THIS WORKFLOW WORKS:
# ========================
#
# SCENARIO 1: Developer modifies data models in a PR
# ---------------------------------------------------
# 1. PR is opened with changes to src/supy/data_model/
# 2. Workflow runs with github-pages-preview environment
# 3. Generates schemas from PR branch code
# 4. Deploys to GitHub Pages WITH yellow preview banner
# 5. Comments preview URL on the PR
# 6. Developer can see how schemas look before merge
#
# SCENARIO 2: PR is merged to master (data model changes)
# --------------------------------------------------------
# 1. Merge triggers push event to master
# 2. Workflow runs with github-pages environment (production)
# 3. Generates schemas from master branch code
# 4. Deploys to GitHub Pages WITHOUT banner (production)
# 5. If schemas differ from what's committed, creates PR for version control
#    (This PR is just for tracking - schemas are already deployed)
#
# SCENARIO 3: Testing workflow or page styling changes
# -----------------------------------------------------
# 1. PR modifies .github/workflows/schema-management.yml or .github/pages/
# 2. Workflow runs in preview mode
# 3. Uses same index.html but with preview banner
# 4. Developer can test visual changes before merge
#
# SCENARIO 4: Manual trigger (workflow_dispatch)
# -----------------------------------------------
# 1. Someone manually triggers workflow from Actions tab
# 2. Runs like a master push (production deployment)
# 3. Useful for forcing regeneration or fixing issues
#
# KEY POINTS:
# - Schemas are GENERATED fresh each time (not read from repo)
# - Preview deployments go to github-pages-preview environment
# - Production deployments go to github-pages environment
# - PRs created are optional (just for Git history)
# - All schema versions are preserved (cumulative generation)

on:
  push:
    branches: [master]
    paths:
      - 'src/supy/data_model/**'
      - '.github/scripts/generate_schema.py'
      - '.github/workflows/schema-management.yml'
  
  pull_request:
    paths:
      - 'src/supy/data_model/**'
      - '.github/scripts/generate_schema.py'
      - '.github/workflows/schema-management.yml'
      - '.github/pages/**'

  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write
  pull-requests: write

jobs:
  generate-deploy:
    name: Generate and Deploy
    runs-on: ubuntu-latest
    # Run on master push OR PR
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/master') ||
      github.event_name == 'pull_request' ||
      github.event_name == 'workflow_dispatch'
    
    # Use preview environment for PRs, production for master
    environment:
      name: ${{ github.event_name == 'pull_request' && 'github-pages-preview' || 'github-pages' }}
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      
      - run: |
          python -m pip install --upgrade pip
          pip install pydantic pyyaml numpy pandas pytz timezonefinder f90nml packaging
      
      # Generate schemas (cumulative - preserves existing versions)
      - name: Generate schemas
        run: |
          echo "üîß Generating schemas..."
          python .github/scripts/generate_schema.py
          echo "‚úÖ Schema generation complete"
      
      # Deploy to GitHub Pages
      - name: Deploy
        run: |
          mkdir -p _site
          
          # Copy all schemas (old + new)
          if [ -d schemas ]; then
            cp -r schemas _site/
          else
            mkdir -p _site/schemas
            echo '{"message": "No schemas yet"}' > _site/schemas/placeholder.json
          fi
          
          # Prepare index.html with conditional preview banner
          if [ -f .github/pages/index.html ]; then
            if [ "${{ github.event_name }}" = "pull_request" ]; then
              # Add preview banner after <body> tag
              sed '/<body>/a\
              <div style="background: #ffeb3b; color: #333; padding: 10px; text-align: center; font-weight: bold; position: fixed; top: 0; left: 0; right: 0; z-index: 9999;">‚ö†Ô∏è PREVIEW - PR #${{ github.event.pull_request.number }} - Not Production</div>\
              <div style="height: 40px;"></div>' .github/pages/index.html > _site/index.html
            else
              cp .github/pages/index.html _site/index.html
            fi
          else
            # Simple fallback
            cat > _site/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>SUEWS Schema</title>
              <meta charset="utf-8">
              <meta http-equiv="refresh" content="0; url=schemas/suews-config/">
          </head>
          <body>
              <h1>SUEWS Schema</h1>
              <p>Redirecting to <a href="schemas/suews-config/">schemas</a>...</p>
          </body>
          </html>
          EOF
          fi
          
          touch _site/.nojekyll
      
      - uses: actions/configure-pages@v5
      - uses: actions/upload-pages-artifact@v3
        with:
          path: _site
      - uses: actions/deploy-pages@v4
        id: deployment
      
      # Create PR if schemas changed (master only, for version control)
      - name: Create PR for schema updates
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if ! git diff --quiet schemas/; then
            BRANCH="auto/schemas-$(date +%Y%m%d-%H%M%S)"
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git checkout -b "$BRANCH"
            git add schemas/
            git commit -m "chore: Update schemas [auto-generated]"
            git push origin "$BRANCH"
            
            gh pr create \
              --base master \
              --head "$BRANCH" \
              --title "ü§ñ Update schemas" \
              --body "Auto-generated schema update. Already deployed to GitHub Pages."
          fi
      
      # Comment on PR with preview URL
      - name: Comment preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const botComment = comments.data.find(c => 
              c.user.type === 'Bot' && c.body.includes('Preview URL:')
            );
            
            const body = `üîç **Preview Deployed**\n\nPreview URL: ${{ steps.deployment.outputs.page_url }}\n\n‚ö†Ô∏è This is a preview deployment. The yellow banner indicates non-production status.`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body
              });
            }