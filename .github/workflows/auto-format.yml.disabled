name: Auto-format Master

on:
  push:
    branches: [ master ]
    paths:
    - '**.py'
    - '**.f90'
    - '**.f95'
    - '.ruff.toml'
    - '.fprettify.rc'
    - '.github/workflows/auto-format.yml'
  workflow_dispatch:
  schedule:
    # Run weekly on Sunday at midnight UTC to clean up old branches
    - cron: '0 0 * * 0'

jobs:
  format:
    # Only run on master branch
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0  # Need full history for accurate diffs

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Cache formatting tools
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-format-${{ hashFiles('.ruff.toml', '.fprettify.rc', '.github/workflows/auto-format.yml') }}
        restore-keys: |
          ${{ runner.os }}-pip-format-

    - name: Install formatting tools
      run: |
        python -m pip install --upgrade pip
        # Pin versions for consistency
        pip install ruff==0.8.6 fprettify==0.3.7
        
        # Verify installation and log versions
        echo "::group::Tool versions"
        echo "Python version:"
        python --version
        echo ""
        echo "Ruff version:"
        ruff --version
        echo ""
        echo "Fprettify version:"
        fprettify --version 2>/dev/null || echo "fprettify $(pip show fprettify | grep Version | cut -d' ' -f2)"
        echo "::endgroup::"

    - name: Check for existing auto-format PR
      id: check_pr
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        echo "::group::Checking for existing PRs"
        # Check if there's already an open auto-format PR
        EXISTING_PR=$(gh pr list --state open --label "auto-format" --json number,url --jq '.[0]' || echo "{}")
        
        if [ "$EXISTING_PR" != "{}" ] && [ "$EXISTING_PR" != "null" ]; then
          PR_NUMBER=$(echo "$EXISTING_PR" | jq -r '.number')
          PR_URL=$(echo "$EXISTING_PR" | jq -r '.url')
          echo "Found existing auto-format PR: #$PR_NUMBER"
          echo "URL: $PR_URL"
          echo "has_existing_pr=true" >> $GITHUB_OUTPUT
          echo "existing_pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "existing_pr_url=$PR_URL" >> $GITHUB_OUTPUT
        else
          echo "No existing auto-format PR found"
          echo "has_existing_pr=false" >> $GITHUB_OUTPUT
        fi
        echo "::endgroup::"

    - name: Clean up old auto-format branches
      if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
      run: |
        echo "::group::Cleaning up old branches"
        # Delete merged auto-format branches older than 7 days
        CUTOFF_DATE=$(date -d '7 days ago' -u +%Y-%m-%dT%H:%M:%SZ)
        
        echo "Cleaning branches merged before: $CUTOFF_DATE"
        
        gh pr list --state merged --search "head:auto-format/" --json number,headRefName,mergedAt --jq '.[]' | \
        while IFS= read -r pr; do
          BRANCH=$(echo "$pr" | jq -r '.headRefName')
          MERGED_AT=$(echo "$pr" | jq -r '.mergedAt')
          PR_NUM=$(echo "$pr" | jq -r '.number')
          
          if [[ "$MERGED_AT" < "$CUTOFF_DATE" ]]; then
            echo "Deleting branch $BRANCH from PR #$PR_NUM (merged at $MERGED_AT)"
            git push origin --delete "$BRANCH" 2>/dev/null || echo "  Branch already deleted"
          fi
        done
        
        # Also clean up any abandoned branches (no associated PR)
        git ls-remote --heads origin 'refs/heads/auto-format/*' | \
        while read -r ref branch; do
          BRANCH_NAME=${branch#refs/heads/}
          if ! gh pr list --state all --head "$BRANCH_NAME" --json number | jq -e '.[0]' >/dev/null 2>&1; then
            echo "Deleting abandoned branch $BRANCH_NAME"
            git push origin --delete "$BRANCH_NAME" 2>/dev/null || echo "  Branch already deleted"
          fi
        done
        echo "::endgroup::"

    - name: Format Python code
      id: format_python
      run: |
        echo "::group::Formatting Python code"
        
        # Find all Python files (not just in src/supy and test)
        PYTHON_FILES=$(find . -name "*.py" -type f | grep -v -E '(\.git|__pycache__|\.tox|\.venv|build|dist|worktrees)' || true)
        
        if [ -z "$PYTHON_FILES" ]; then
          echo "No Python files found to format"
          echo "python_formatted=false" >> $GITHUB_OUTPUT
        else
          echo "Found $(echo "$PYTHON_FILES" | wc -l) Python files"
          
          # Format and check for errors
          if ruff format --check $PYTHON_FILES 2>/dev/null; then
            echo "All Python files already formatted correctly"
            echo "python_formatted=false" >> $GITHUB_OUTPUT
          else
            echo "Formatting Python files..."
            if ruff format $PYTHON_FILES; then
              echo "✅ Python formatting completed successfully"
              echo "python_formatted=true" >> $GITHUB_OUTPUT
            else
              echo "::error::Ruff formatting failed"
              exit 1
            fi
          fi
        fi
        echo "::endgroup::"

    - name: Format Fortran code
      id: format_fortran
      run: |
        echo "::group::Formatting Fortran code"
        
        # Check for fprettify config
        if [ ! -f .fprettify.rc ]; then
          echo "::warning::.fprettify.rc not found, skipping Fortran formatting"
          echo "fortran_formatted=false" >> $GITHUB_OUTPUT
          echo "::endgroup::"
          exit 0
        fi
        
        # Create exclude patterns file
        cat > .fprettify-exclude << 'EOF'
        suews_util_datetime.f95
        EOF
        
        # Find all Fortran files
        FORTRAN_FILES=$(find . \( -name "*.f90" -o -name "*.f95" \) -type f | \
                       grep -v -E '(\.git|build|dist|worktrees)' | \
                       grep -v -f .fprettify-exclude || true)
        
        if [ -z "$FORTRAN_FILES" ]; then
          echo "No Fortran files found to format"
          echo "fortran_formatted=false" >> $GITHUB_OUTPUT
        else
          echo "Found $(echo "$FORTRAN_FILES" | wc -l) Fortran files"
          
          # Format files one by one to catch individual errors
          FAILED_FILES=""
          for file in $FORTRAN_FILES; do
            echo "Formatting: $file"
            if ! fprettify --config .fprettify.rc "$file" 2>&1; then
              echo "::warning::Failed to format $file"
              FAILED_FILES="$FAILED_FILES $file"
            fi
          done
          
          if [ -n "$FAILED_FILES" ]; then
            echo "::warning::Failed to format some Fortran files:$FAILED_FILES"
          fi
          
          echo "fortran_formatted=true" >> $GITHUB_OUTPUT
        fi
        
        # Clean up
        rm -f .fprettify-exclude
        echo "::endgroup::"

    - name: Check for changes
      id: verify
      run: |
        # Check if any files were modified
        if git diff --quiet; then
          echo "No formatting changes needed ✨"
          echo "has_changes=false" >> $GITHUB_OUTPUT
        else
          echo "Formatting changes detected"
          echo "has_changes=true" >> $GITHUB_OUTPUT
          
          # Store changed files for PR body
          CHANGED_FILES=$(git diff --name-only)
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Count changes
          PYTHON_CHANGES=$(echo "$CHANGED_FILES" | grep -c '\.py$' || true)
          FORTRAN_CHANGES=$(echo "$CHANGED_FILES" | grep -c '\.\(f90\|f95\)$' || true)
          TOTAL_CHANGES=$(echo "$CHANGED_FILES" | wc -l)
          
          echo "python_changes=$PYTHON_CHANGES" >> $GITHUB_OUTPUT
          echo "fortran_changes=$FORTRAN_CHANGES" >> $GITHUB_OUTPUT
          echo "total_changes=$TOTAL_CHANGES" >> $GITHUB_OUTPUT
          
          # Show what changed
          echo "::group::Files with formatting changes"
          git diff --name-only
          echo "::endgroup::"
          
          # Show diff statistics
          echo "::group::Change statistics"
          git diff --stat
          echo "::endgroup::"
        fi

    - name: Create or update Pull Request
      if: steps.verify.outputs.has_changes == 'true'
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        # Configure git
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        if [[ "${{ steps.check_pr.outputs.has_existing_pr }}" == "true" ]]; then
          echo "::group::Updating existing PR"
          # Fetch the existing PR's branch
          PR_NUMBER="${{ steps.check_pr.outputs.existing_pr_number }}"
          BRANCH_NAME=$(gh pr view "$PR_NUMBER" --json headRefName --jq '.headRefName')
          
          # Fetch and checkout the branch
          git fetch origin "$BRANCH_NAME"
          git checkout "$BRANCH_NAME"
          
          # Rebase on master to get latest changes
          git rebase origin/master
          
          # Stage and amend the commit
          git add -A
          git commit --amend -m "style: auto-format Python and Fortran code [skip ci]" \
            -m "This commit was automatically generated to maintain consistent code formatting." \
            -m "- Python: formatted with ruff v0.8.6 (see .ruff.toml)" \
            -m "- Fortran: formatted with fprettify v0.3.7 (see .fprettify.rc)" \
            -m "[skip ci] to prevent workflow chains"
          
          # Force push the updated branch
          git push origin "$BRANCH_NAME" --force-with-lease
          
          echo "✅ Updated existing PR #$PR_NUMBER"
          echo "::endgroup::"
        else
          echo "::group::Creating new PR"
          # Create a unique branch name
          BRANCH_NAME="auto-format/$(date +%Y%m%d-%H%M%S)"
          
          # Create and switch to new branch
          git checkout -b "$BRANCH_NAME"
          
          # Stage all changes
          git add -A
          
          # Create commit with [skip ci] to prevent workflow chains
          git commit -m "style: auto-format Python and Fortran code [skip ci]" \
            -m "This commit was automatically generated to maintain consistent code formatting." \
            -m "- Python: formatted with ruff v0.8.6 (see .ruff.toml)" \
            -m "- Fortran: formatted with fprettify v0.3.7 (see .fprettify.rc)" \
            -m "[skip ci] to prevent workflow chains"
          
          # Push branch
          git push origin "$BRANCH_NAME"
          
          # Create pull request with detailed body
          gh pr create \
            --title "style: auto-format Python and Fortran code" \
            --body "## 🤖 Auto-format Summary
          
This PR automatically formats code to maintain consistent style across the project.

### 📊 Changes Overview
- **Python files changed**: ${{ steps.verify.outputs.python_changes }}
- **Fortran files changed**: ${{ steps.verify.outputs.fortran_changes }}
- **Total files**: ${{ steps.verify.outputs.total_changes }}

### 🛠️ Formatting Tools
- **Python**: \`ruff\` v0.8.6 ([configuration](.ruff.toml))
- **Fortran**: \`fprettify\` v0.3.7 ([configuration](.fprettify.rc))

### 📝 Files Changed
<details>
<summary>Click to expand file list</summary>

\`\`\`
${{ steps.verify.outputs.changed_files }}
\`\`\`
</details>

### 🔍 Review Instructions
- This PR only contains formatting changes (no logic modifications)
- Review the diff to ensure no unintended changes
- Check that all files compile and tests pass
- The commit includes \`[skip ci]\` to prevent workflow chains

### 🏷️ Labels
- \`auto-format\`: Automatically generated formatting PR
- \`style\`: Code style improvements

---
*🤖 This PR was automatically generated by the [auto-format workflow](.github/workflows/auto-format.yml)*" \
            --base master \
            --head "$BRANCH_NAME" \
            --label "auto-format" \
            --label "style"
          
          echo "::endgroup::"
        fi

    - name: Summary
      if: always()
      run: |
        echo "## Auto-format Workflow Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Tool versions
        echo "### 🛠️ Tool Versions" >> $GITHUB_STEP_SUMMARY
        echo "- Python: $(python --version 2>&1 | cut -d' ' -f2)" >> $GITHUB_STEP_SUMMARY
        echo "- Ruff: $(ruff --version 2>&1 | cut -d' ' -f2)" >> $GITHUB_STEP_SUMMARY
        echo "- Fprettify: $(pip show fprettify | grep Version | cut -d' ' -f2)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Results
        echo "### 📊 Results" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ steps.verify.outputs.has_changes }}" == "true" ]]; then
          echo "✅ **Code has been automatically formatted**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Python files changed: ${{ steps.verify.outputs.python_changes }}" >> $GITHUB_STEP_SUMMARY
          echo "- Fortran files changed: ${{ steps.verify.outputs.fortran_changes }}" >> $GITHUB_STEP_SUMMARY
          echo "- Total files changed: ${{ steps.verify.outputs.total_changes }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ steps.check_pr.outputs.has_existing_pr }}" == "true" ]]; then
            echo "📝 **Updated existing PR**: [#${{ steps.check_pr.outputs.existing_pr_number }}](${{ steps.check_pr.outputs.existing_pr_url }})" >> $GITHUB_STEP_SUMMARY
          else
            echo "📝 **Created new PR** for review" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "ℹ️ **Note**: Commits include \`[skip ci]\` to prevent workflow chains" >> $GITHUB_STEP_SUMMARY
        else
          echo "✨ **No formatting changes needed** - code is already properly formatted!" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Errors or warnings
        if [[ "${{ job.status }}" == "failure" ]]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ❌ Errors" >> $GITHUB_STEP_SUMMARY
          echo "The workflow encountered errors. Please check the logs for details." >> $GITHUB_STEP_SUMMARY
        fi