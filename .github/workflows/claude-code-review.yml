# Claude Code Review Workflow
#
# This workflow triggers Claude code review when YOU (and only you) mention @claude in a PR comment.
# 
# Usage:
#   1. In any pull request, add a comment mentioning @claude
#   2. Include your specific review request in the comment
#   3. Claude will respond with code review feedback
#
# Example:
#   "@claude please review this code for security vulnerabilities"
#   "@claude check if this follows our coding standards"
#
# Note: Set CLAUDE_AUTHORIZED_USERS secret in repository settings
# Format: comma-separated list of GitHub usernames (e.g., "sunt05,user2,user3")
#
name: Claude Code Review

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]

jobs:
  claude-review:
    # Only run when Claude is mentioned in a PR comment
    if: |
      ((github.event_name == 'issue_comment' && 
        github.event.issue.pull_request && 
        contains(github.event.comment.body, '@claude')) || 
       (github.event_name == 'pull_request_review_comment' && 
        contains(github.event.comment.body, '@claude')))
    
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
    
    steps:
      - name: Check user authorization
        id: auth-check
        env:
          AUTHORIZED_USERS: ${{ secrets.CLAUDE_AUTHORIZED_USERS }}
          COMMENT_USER: ${{ github.event.comment.user.login }}
        run: |
          if [ -z "$AUTHORIZED_USERS" ]; then
            echo "❌ CLAUDE_AUTHORIZED_USERS secret not configured"
            echo "authorized=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check if user is in the authorized list
          if echo "$AUTHORIZED_USERS" | grep -q "\b$COMMENT_USER\b"; then
            echo "✅ User $COMMENT_USER is authorized"
            echo "authorized=true" >> $GITHUB_OUTPUT
          else
            echo "❌ User $COMMENT_USER is not authorized"
            echo "authorized=false" >> $GITHUB_OUTPUT
          fi
          
      - name: Comment if unauthorized
        if: steps.auth-check.outputs.authorized == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '❌ Sorry, you are not authorized to trigger Claude reviews. Please contact the repository maintainers.'
            };
            await github.rest.issues.createComment(comment);
            core.setFailed('Unauthorized user');
            
      - name: Get PR information
        if: github.event_name == 'issue_comment' && steps.auth-check.outputs.authorized == 'true'
        id: pr-info
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });
            core.setOutput('head_sha', pr.head.sha);
            
      - name: Checkout repository
        if: steps.auth-check.outputs.authorized == 'true'
        uses: actions/checkout@v4
        with:
          # For PR comments, we need to check out the PR branch
          ref: ${{ steps.pr-info.outputs.head_sha || github.event.pull_request.head.sha }}
          fetch-depth: 1

      - name: Run Claude Code Review
        if: steps.auth-check.outputs.authorized == 'true'
        id: claude-review
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          
          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"
          
          # Extract the comment text and use it as the prompt
          direct_prompt: |
            ${{ github.event.comment.body }}
            
            Please review this pull request based on the request above and provide feedback.
            Focus on the specific aspects mentioned in the comment.
            Be constructive and helpful in your feedback.
          
          # Optional: Customize review based on file types
          # direct_prompt: |
          #   Review this PR focusing on:
          #   - For TypeScript files: Type safety and proper interface usage
          #   - For API endpoints: Security, input validation, and error handling
          #   - For React components: Performance, accessibility, and best practices
          #   - For tests: Coverage, edge cases, and test quality
          
          # Optional: Different prompts for different authors
          # direct_prompt: |
          #   ${{ github.event.pull_request.author_association == 'FIRST_TIME_CONTRIBUTOR' && 
          #   'Welcome! Please review this PR from a first-time contributor. Be encouraging and provide detailed explanations for any suggestions.' ||
          #   'Please provide a thorough code review focusing on our coding standards and best practices.' }}
          
          # Optional: Add specific tools for running tests or linting
          # allowed_tools: "Bash(npm run test),Bash(npm run lint),Bash(npm run typecheck)"
          
          # Optional: Skip review for certain conditions
          # if: |
          #   !contains(github.event.pull_request.title, '[skip-review]') &&
          #   !contains(github.event.pull_request.title, '[WIP]')

